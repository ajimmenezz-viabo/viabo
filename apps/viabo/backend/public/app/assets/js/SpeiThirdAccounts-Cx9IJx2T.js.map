{"version":3,"mappings":"inBAIO,MAAMA,EAA0B,KAU9B,CACL,cAVoBC,EAAO,QAC3B,IAAM,CACJ,CAAE,KAAM,SAAU,KAAM,GAAK,EAC7B,CAAE,KAAMC,EAAkB,KAAK,KAAM,KAAMC,EAAiB,cAAgB,EAC5E,CAAE,KAAM,qBAAuB,CAChC,EACD,CAAE,CACH,CAIA,kiBChBI,MAAMC,EAA2B,CACtC,oBAAqB,0BACvB,ECEaC,EAAoB,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,IAAI,CAACC,EAAGC,KAAW,CAClE,GAAIC,EAAM,GAAGD,CAAK,EAClB,KAAME,EAAM,OAAO,SAAU,EAC7B,MAAOA,EAAM,OAAO,QAAQ,EAAE,EAC9B,MAAOA,EAAM,SAAS,MAAO,EAC7B,MAAOA,EAAM,MAAM,OAAQ,EAC3B,KAAMD,EAAM,KAAK,KAAKD,CAAK,EAC3B,IAAKE,EAAM,OAAO,OAAO,EAAE,EAC3B,MAAOA,EAAM,OAAO,WAAY,EAChC,OAAQA,EAAM,SAAS,QAAQ,CAAE,YAAa,GAAK,CACrD,EAAE,ECZWC,EAA2B,SAEtCL,ECMWM,EAA+B,CAACC,EAAU,KAAO,CAC5D,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACb,EAAyB,mBAAmB,EACvD,QAASM,EACT,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGE,CACP,CAAG,EAEDM,mBAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeC,EACnBJ,EAAM,MACN,8FACD,EACDF,EAAeK,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BN,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH","names":["useViaboSpeiBreadCrumbs","useMemo","VIABO_SPEI_ROUTES","VIABO_SPEI_PATHS","SPEI_THIRD_ACCOUNTS_KEYS","ThirdAccountsMock","_","index","_mock","faker","getSpeiThirdAccountsList","useFindSpeiThirdAccountsList","options","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode"],"sources":["../../../../../frontend/src/app/business/viabo-spei/shared/hooks/useViaboSpeiBreadCrumbs.js","../../../../../frontend/src/app/business/viabo-spei/third-accounts/adapters/spei-third-accounts-keys.js","../../../../../frontend/src/app/business/viabo-spei/third-accounts/_mock/third-accounts-mock.js","../../../../../frontend/src/app/business/viabo-spei/third-accounts/services/SpeiThirdAccountsRepository.js","../../../../../frontend/src/app/business/viabo-spei/third-accounts/hooks/useFindSpeiThirdAccountsList.js"],"sourcesContent":["import { useMemo } from 'react'\n\nimport { VIABO_SPEI_PATHS, VIABO_SPEI_ROUTES } from '../routes/viabo-spei-paths'\n\nexport const useViaboSpeiBreadCrumbs = () => {\n  const thirdAccounts = useMemo(\n    () => [\n      { name: 'Inicio', href: '/' },\n      { name: VIABO_SPEI_ROUTES.root.name, href: VIABO_SPEI_PATHS.third_accounts },\n      { name: 'Cuentas de Terceros' }\n    ],\n    []\n  )\n\n  return {\n    thirdAccounts\n  }\n}\n","export const SPEI_THIRD_ACCOUNTS_KEYS = {\n  THIRD_ACCOUNTS_LIST: 'spei-third-accounts-list'\n}\n","import { faker } from '@faker-js/faker'\n\nimport { _mock } from '@/app/shared/_mock'\n\nexport const ThirdAccountsMock = [...Array(100)].map((_, index) => ({\n  id: _mock.id(index),\n  name: faker.person.fullName(),\n  clabe: faker.string.numeric(18),\n  email: faker.internet.email(),\n  phone: faker.phone.number(),\n  bank: _mock.bank.name(index),\n  rfc: faker.string.nanoid(13),\n  alias: faker.person.middleName(),\n  status: faker.datatype.boolean({ probability: 0.6 })\n}))\n","import { ThirdAccountsMock } from '../_mock'\n\nexport const getSpeiThirdAccountsList = async () =>\n  // const { data } = await axios.get('/api/viabo-spei/third-accounts')\n  ThirdAccountsMock\n","import { useEffect, useState } from 'react'\n\nimport { useQuery } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_THIRD_ACCOUNTS_KEYS } from '../adapters'\nimport { getSpeiThirdAccountsList } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\n\nexport const useFindSpeiThirdAccountsList = (options = {}) => {\n  const [customError, setCustomError] = useState(null)\n\n  const query = useQuery({\n    queryKey: [SPEI_THIRD_ACCOUNTS_KEYS.THIRD_ACCOUNTS_LIST],\n    queryFn: getSpeiThirdAccountsList,\n    refetchOnWindowFocus: false,\n    retry: false,\n    staleTime: 300000,\n    ...options\n  })\n\n  useEffect(() => {\n    if (query?.isError) {\n      const errorMessage = getErrorAPI(\n        query.error,\n        'No se puede obtener la lista de cuentas de terceros. Intente nuevamente o reporte a sistemas'\n      )\n      setCustomError(errorMessage)\n      toast.error(errorMessage, {\n        type: getNotificationTypeByErrorCode(query.error)\n      })\n    }\n  }, [query.isError, query.error])\n\n  return {\n    ...query,\n    error: customError || null\n  }\n}\n"],"file":"assets/js/SpeiThirdAccounts-Cx9IJx2T.js"}