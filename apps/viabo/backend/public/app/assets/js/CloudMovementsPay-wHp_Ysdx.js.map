{"version":3,"mappings":"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","names":["initialState","liquidatedMovementsStore","set","get","movement","state","open","filterDate","useViaboPayLiquidatedMovementsStore","createStore","CLOUD_VIABO_PAY_KEYS","ViaboPayLiquidatedMovementsAdapter","data","amount","date","format","normalizeDateString","es","time","fCurrency","getViaboPayLiquidatedMovements","startDate","endDate","signal","fetchURL","axios","liquidateTerminalMovement","useFindViaboPayLiquidatedMovements","options","setFilterDate","initialDate","startOfDay","finalDate","endOfDay","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode"],"sources":["../../../../../frontend/src/app/business/viabo-pay/cloud/store/viabo-pay-liquidated-movements.js","../../../../../frontend/src/app/business/viabo-pay/cloud/adapters/cloud-viabo-pay-keys.js","../../../../../frontend/src/app/business/viabo-pay/cloud/adapters/viabo-pay-liquidated-movements-adapter.js","../../../../../frontend/src/app/business/viabo-pay/cloud/services/CloudViaboPayRepository.js","../../../../../frontend/src/app/business/viabo-pay/cloud/hooks/useFindViaboPayLiquidatedMovements.js"],"sourcesContent":["import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  openDrawerLiquidateMovement: false,\r\n  movement: null,\r\n  filterDate: null\r\n}\r\n\r\nconst liquidatedMovementsStore = (set, get) => ({\r\n  ...initialState,\r\n  setMovementToLiquidate: movement => {\r\n    set(\r\n      state => ({\r\n        movement\r\n      }),\r\n      false,\r\n      'SET_DETAILS_MOVEMENT_TO_LIQUIDATE'\r\n    )\r\n  },\r\n\r\n  setOpenDrawerLiquidateMovement: open => {\r\n    set(\r\n      state => ({\r\n        openDrawerLiquidateMovement: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_LIQUIDATE_MOVEMENT_VIABO_PAY'\r\n    )\r\n  },\r\n\r\n  setFilterDate: filterDate => {\r\n    set(\r\n      state => ({\r\n        filterDate\r\n      }),\r\n      false,\r\n      'SET_FILTER_DATE_LIQUIDATE_MOVEMENTS'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useViaboPayLiquidatedMovementsStore = createStore(liquidatedMovementsStore)\r\n","export const CLOUD_VIABO_PAY_KEYS = {\r\n  MOVEMENTS: 'liquidated-viabo-pay-movements'\r\n}\r\n","import { format } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\n\r\nimport { fCurrency, normalizeDateString } from '@/shared/utils'\r\n\r\nexport const ViaboPayLiquidatedMovementsAdapter = data => {\r\n  const movements =\r\n    data?.map(movement => {\r\n      const amount = parseFloat(movement?.amount || '0')\r\n      const date = movement?.transaction_date\r\n        ? format(normalizeDateString(movement?.transaction_date), 'dd MMM yyyy', { locale: es })\r\n        : ''\r\n      const time = movement?.transaction_date ? format(normalizeDateString(movement?.transaction_date), 'p') : ''\r\n\r\n      return {\r\n        id: movement?.id,\r\n        terminalName: movement?.terminal_name,\r\n        terminalId: movement?.terminal_id,\r\n        amount,\r\n        amountFormat: fCurrency(amount),\r\n        amountToLiquidate: movement?.amountToSettled,\r\n        amountToLiquidateFormat: fCurrency(movement?.amountToSettled),\r\n        commerceName: movement?.commerceName,\r\n        commerceId: movement?.commerceId,\r\n        approved: movement?.approved,\r\n        cardType: movement?.card_brand,\r\n        authNumber: movement?.authorization_number,\r\n        commission: movement?.commission >= 0 ? `${movement?.commission}%` : '0%',\r\n        cardNumber: movement?.card_number,\r\n        cardBank: movement?.issuer,\r\n        transactionDate: {\r\n          fullDate: format(normalizeDateString(movement?.transaction_date), 'dd MMM yyyy HH:mm', { locale: es }),\r\n          date,\r\n          time\r\n        },\r\n        serverDate: normalizeDateString(movement?.transaction_date),\r\n        description: `${movement?.issuer === '' ? movement?.card_brand : movement?.issuer}-${\r\n          movement?.card_number\r\n        }`.toUpperCase(),\r\n        transactionMessage: movement?.result_message,\r\n        conciliated: !!movement?.conciliated,\r\n        conciliatedName: movement?.conciliated ? 'Conciliada' : 'Sin Conciliar',\r\n        liquidationStatus: {\r\n          id: movement?.liquidationStatusId,\r\n          name: movement?.liquidationStatusName\r\n        },\r\n        dataToLiquidate: {\r\n          id: movement?.id,\r\n          commerceId: movement?.commerceId,\r\n          authorization_number: movement?.authorization_number,\r\n          terminal_id: movement?.terminal_id,\r\n          terminal_spei_card: movement?.terminal_spei_card || '',\r\n          amountToSettled: movement?.amountToSettled\r\n        }\r\n      }\r\n    }) ?? []\r\n\r\n  return movements\r\n}\r\n","import { ViaboPayLiquidatedMovementsAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getViaboPayLiquidatedMovements = async (startDate, endDate, signal) => {\r\n  const fetchURL = new URL('/api/terminals/shared/transactions', window.location.origin)\r\n  fetchURL.searchParams.set('startDate', startDate)\r\n  fetchURL.searchParams.set('endDate', endDate)\r\n  const { data } = await axios.get(fetchURL.href, {\r\n    signal\r\n  })\r\n  return ViaboPayLiquidatedMovementsAdapter(data)\r\n}\r\n\r\nexport const liquidateTerminalMovement = async movement => {\r\n  const { data } = await axios.post('/api/card/transactions/shared-terminals', movement)\r\n  return data\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { CLOUD_VIABO_PAY_KEYS } from '../adapters'\r\nimport { getViaboPayLiquidatedMovements } from '../services'\r\nimport { useViaboPayLiquidatedMovementsStore } from '../store'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindViaboPayLiquidatedMovements = (startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const { setFilterDate } = useViaboPayLiquidatedMovementsStore(state => state)\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd HH:mm:ss')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd HH:mm:ss')\r\n\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n\r\n\r\n  const query = useQuery({\r\n    queryKey: [CLOUD_VIABO_PAY_KEYS.MOVEMENTS],\r\n    queryFn: ({ signal }) => getViaboPayLiquidatedMovements(initialDate, finalDate, signal),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    onSuccess: data => {\r\n      setFilterDate({\r\n        startDate: startOfDay(startDate),\r\n        endDate: endOfDay(endDate),\r\n        text: `${format(startDate, 'dd MMMM yyyy', { locale: es })} - ${format(endDate, 'dd MMMM yyyy', {\r\n          locale: es\r\n        })}`\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de movimientos. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/CloudMovementsPay-wHp_Ysdx.js"}