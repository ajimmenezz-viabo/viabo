{"version":3,"mappings":"yzBAKO,MAAMA,EAA+BC,EAC1C,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACC,EAAGC,KAAW,CAC/B,GAAIC,EAAM,GAAGD,CAAK,EAClB,KAAME,EAAM,OAAO,SAAU,EAC7B,OAAQA,EAAM,SAAS,QAAQ,CAAE,YAAa,GAAK,CACvD,EAAI,CACJ,ECTaC,EAA2B,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAACJ,EAAGC,KAAW,CACvE,GAAIE,EAAM,OAAO,QAAQ,CAAC,EAC1B,KAAMA,EAAM,QAAQ,KAAM,EAC1B,OAAQA,EAAM,SAAS,QAAQ,CAAE,YAAa,GAAK,EACnD,UAAWA,EAAM,OAAO,QAAQ,CAAC,CACnC,EAAE,ECLWE,EAAkCC,GAAS,CACtD,MAAMC,EAAiBC,EAAeF,GAAA,YAAAA,EAAO,WAAYA,GAAA,YAAAA,EAAO,EAAE,EAElE,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,wEAAwE,EAG1F,MAAME,EAAeF,GAAA,YAAAA,EAAgB,IAAIG,IAAS,CAChD,GAAIA,GAAA,YAAAA,EAAM,GACV,KAAMA,GAAA,YAAAA,EAAM,KACZ,OAAQ,CAAC,EAACA,GAAA,MAAAA,EAAM,OACpB,IAEE,OAAOC,EAA4BF,EAAc,KAAM,OAAQ,QAAQ,CACzE,EChBaG,EAAyB,CACpC,kBAAmB,yBACnB,6BAA8B,mCAChC,EAEaC,GAAgC,CAC3C,YAAa,QACb,eAAgB,UAClB,ECRaC,EAA6BC,IAEtCA,GAAA,YAAAA,EAAa,IAAIC,IAAY,CAC3B,GAAIA,GAAA,YAAAA,EAAS,GACb,KAAMA,GAAA,YAAAA,EAAS,KACf,OAAQ,CAAC,EAACA,GAAA,MAAAA,EAAS,QACnB,UAAWA,GAAA,YAAAA,EAAS,SACrB,MAAM,CAAE,ECFAC,EAAyB,SAG7BH,EADMV,CACyB,EAG3Bc,GAAoB,MAAMC,GAAc,CACnD,KAAM,CAAE,KAAAC,CAAI,EAAK,MAAMC,EAAM,KAAK,6BAA8BF,CAAU,EAC1E,OAAOC,CACT,EAEaE,GAAmC,SAKvCjB,EAFMP,CAE8B,ECXhCyB,EAAyB,CAACC,EAAU,KAAO,CACtD,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACjB,EAAuB,iBAAiB,EACnD,QAASK,EACT,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGO,CACP,CAAG,EAEDM,mBAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeC,EACnBJ,EAAM,MACN,mFACD,EACDF,EAAeK,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BN,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH,+hBCrCMU,EAAe,CACnB,WAAY,KACZ,kBAAmB,EACrB,EACMC,EAAuB,CAACC,EAAKC,KAAS,CAC1C,GAAGH,EACH,kBAAmBhB,GAAc,CAC/BkB,EACEE,IAAU,CACR,WAAApB,CACR,GACM,GACA,sBACD,CACF,EACD,yBAA0BqB,GAAQ,CAChCH,EACEE,IAAU,CACR,kBAAmBC,CAC3B,GACM,GACA,+BACD,CACF,CACH,GAEaC,EAA0BC,EAAYN,CAAoB","names":["SpeiAdminCostCenterUsersMock","getCryptInfo","_","index","_mock","faker","SpeiAdminCostCentersMock","SpeiAdminCostCenterUsersAdapter","users","decryptedUsers","getDecryptInfo","usersAdapted","user","convertCatalogToReactSelect","SPEI_COST_CENTERS_KEYS","METHODS_NEW_COST_CENTER_USERS","SpeiCostCentersListAdapter","costCenters","company","getSpeiCostCentersList","newSpeiCostCenter","costCenter","data","axios","getViaboSpeiAdminCostCenterUsers","useFindSpeiCostCenters","options","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","initialState","speiCostCentersStore","set","get","state","open","useSpeiCostCentersStore","createStore"],"sources":["../../../../../frontend/src/app/business/viabo-spei/cost-centers/_mock/spe-admin-cost-center-users-mock.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/_mock/spei-cost-centers-mock.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-admin-cost-center-users-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-cost-centers-keys.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-cost-centers-list-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/services/SpeiCostCentersRepository.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/hooks/useFindSpeiCostCenters.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/store/spei-cost-centers-store.js"],"sourcesContent":["import { faker } from '@faker-js/faker'\n\nimport { _mock } from '@/app/shared/_mock'\nimport { getCryptInfo } from '@/shared/utils'\n\nexport const SpeiAdminCostCenterUsersMock = getCryptInfo(\n  [...Array(5)].map((_, index) => ({\n    id: _mock.id(index),\n    name: faker.person.fullName(),\n    status: faker.datatype.boolean({ probability: 0.8 })\n  }))\n)\n","import { faker } from '@faker-js/faker'\n\nexport const SpeiAdminCostCentersMock = [...Array(5)].map((_, index) => ({\n  id: faker.string.numeric(6),\n  name: faker.company.name(),\n  active: faker.datatype.boolean({ probability: 0.8 }),\n  companies: faker.string.numeric(2)\n}))\n","import { convertCatalogToReactSelect, getDecryptInfo } from '@/shared/utils'\n\nexport const SpeiAdminCostCenterUsersAdapter = users => {\n  const decryptedUsers = getDecryptInfo(users?.ciphertext, users?.iv)\n\n  if (!decryptedUsers) {\n    throw new Error('No se pueden obtener los usuarios administradores de centros de costos')\n  }\n\n  const usersAdapted = decryptedUsers?.map(user => ({\n    id: user?.id,\n    name: user?.name,\n    status: !!user?.status\n  }))\n\n  return convertCatalogToReactSelect(usersAdapted, 'id', 'name', 'status')\n}\n","export const SPEI_COST_CENTERS_KEYS = {\r\n  COST_CENTERS_LIST: 'spei-cost-centers-list',\r\n  USERS_ADMIN_COST_CENTER_LIST: 'spei-admin-cost-center-users-list'\r\n}\r\n\r\nexport const METHODS_NEW_COST_CENTER_USERS = {\r\n  ADMIN_USERS: 'users',\r\n  NEW_ADMIN_USER: 'new-user'\r\n}\r\n","export const SpeiCostCentersListAdapter = costCenters => {\r\n  const costCentersAdapted =\r\n    costCenters?.map(company => ({\r\n      id: company?.id,\r\n      name: company?.name,\r\n      status: !!company?.active,\r\n      companies: company?.companies\r\n    })) || []\r\n\r\n  return costCentersAdapted\r\n}\r\n","import { SpeiAdminCostCenterUsersMock, SpeiAdminCostCentersMock } from '../_mock'\r\nimport { SpeiAdminCostCenterUsersAdapter, SpeiCostCentersListAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getSpeiCostCentersList = async () => {\r\n  // const { data } = await axios.get('/api/spei/external-accounts')\r\n  const data = SpeiAdminCostCentersMock\r\n  return SpeiCostCentersListAdapter(data)\r\n}\r\n\r\nexport const newSpeiCostCenter = async costCenter => {\r\n  const { data } = await axios.post('/api/spei/cost-centers/new', costCenter)\r\n  return data\r\n}\r\n\r\nexport const getViaboSpeiAdminCostCenterUsers = async () => {\r\n  // const { data } = await axios.get('/api/spei/users')\r\n\r\n  const data = SpeiAdminCostCenterUsersMock\r\n\r\n  return SpeiAdminCostCenterUsersAdapter(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COST_CENTERS_KEYS } from '../adapters'\r\nimport { getSpeiCostCentersList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCostCenters = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COST_CENTERS_KEYS.COST_CENTERS_LIST],\r\n    queryFn: getSpeiCostCentersList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de empresas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  costCenter: null,\r\n  openNewCostCenter: false\r\n}\r\nconst speiCostCentersStore = (set, get) => ({\r\n  ...initialState,\r\n  setSpeiCostCenter: costCenter => {\r\n    set(\r\n      state => ({\r\n        costCenter\r\n      }),\r\n      false,\r\n      'SET_SPEI_COST_CENTER'\r\n    )\r\n  },\r\n  setOpenNewSpeiCostCenter: open => {\r\n    set(\r\n      state => ({\r\n        openNewCostCenter: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_SPEI_NEW_COST_CENTER'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useSpeiCostCentersStore = createStore(speiCostCentersStore)\r\n"],"file":"assets/js/ViaboSpeiCostCenters--cgK_71n.js"}