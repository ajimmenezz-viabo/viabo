{"version":3,"file":"SpeiNewCostCenterForm-10CNgHyq.js","sources":["../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-new-cost-center-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/hooks/useCreateNewSpeiCostCenter.js"],"sourcesContent":["import { METHODS_NEW_COST_CENTER_USERS } from './spei-cost-centers-keys'\n\nexport const SpeiNewCostCenterAdapter = company => ({\n  name: company?.adminName?.trim(),\n  isNewUser: company?.method === METHODS_NEW_COST_CENTER_USERS.NEW_ADMIN_USER,\n  assignedUsers: company?.adminUsers?.map(user => user.value) || [],\n  newUserName: company?.adminName?.trim(),\n  newUserLastName: company?.adminLastName?.trim(),\n  newUserEmail: company?.adminEmail?.trim(),\n  newUserPhone: company?.adminPhone?.trim()\n})\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { newSpeiCostCenter } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useCreateNewSpeiCostCenter = (options = {}) => {\n  const client = useQueryClient()\n  const costCenter = useMutation(newSpeiCostCenter, options)\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, mutationOptions } = options\n\n    try {\n      await toast.promise(costCenter.mutateAsync(formData, mutationOptions), {\n        pending: 'Creando centro de costos...',\n        success: {\n          render({ data }) {\n            // client.invalidateQueries([SPEI_THIRD_ACCOUNTS_KEYS.THIRD_ACCOUNTS_LIST])\n            isFunction(onSuccess) && onSuccess(data)\n\n            return 'Se creó el centro de costos con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...costCenter,\n    mutate\n  }\n}\n"],"names":["SpeiNewCostCenterAdapter","company","_a","METHODS_NEW_COST_CENTER_USERS","_b","user","_c","_d","_e","_f","useCreateNewSpeiCostCenter","options","useQueryClient","costCenter","useMutation","newSpeiCostCenter","formData","onSuccess","onError","mutationOptions","toast","data","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode"],"mappings":"g0BAEO,MAAMA,EAA2BC,GAAY,iBAAA,OAClD,MAAMC,EAAAD,GAAA,YAAAA,EAAS,YAAT,YAAAC,EAAoB,OAC1B,WAAWD,GAAA,YAAAA,EAAS,UAAWE,EAA8B,eAC7D,gBAAeC,EAAAH,GAAA,YAAAA,EAAS,aAAT,YAAAG,EAAqB,IAAIC,GAAQA,EAAK,SAAU,CAAE,EACjE,aAAaC,EAAAL,GAAA,YAAAA,EAAS,YAAT,YAAAK,EAAoB,OACjC,iBAAiBC,EAAAN,GAAA,YAAAA,EAAS,gBAAT,YAAAM,EAAwB,OACzC,cAAcC,EAAAP,GAAA,YAAAA,EAAS,aAAT,YAAAO,EAAqB,OACnC,cAAcC,EAAAR,GAAA,YAAAA,EAAS,aAAT,YAAAQ,EAAqB,MACrC,GCFaC,EAA6B,CAACC,EAAU,KAAO,CAC3CC,EAAgB,EAC/B,MAAMC,EAAaC,EAAYC,EAAmBJ,CAAO,EA4BzD,MAAO,CACL,GAAGE,EACH,OA7Ba,MAAOG,EAAUL,IAAY,CAC1C,KAAM,CAAE,UAAAM,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGR,EAEhD,GAAI,CACF,MAAMS,EAAM,QAAQP,EAAW,YAAYG,EAAUG,CAAe,EAAG,CACrE,QAAS,8BACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CAEf,OAAAC,EAAWL,CAAS,GAAKA,EAAUI,CAAI,EAEhC,uCACR,CACF,CACT,CAAO,CACF,OAAQE,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWJ,CAAO,GAAKA,EAAQM,CAAc,EAC7CJ,EAAM,MAAMI,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH"}