{"version":3,"mappings":"spBAWO,MAAMA,EAA4B,CAACC,EAAUC,EAAU,KAAO,CACnE,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAC7CC,EAAoBC,EAA0BC,GAASA,EAAM,iBAAiB,EAE9EC,EAAQC,EAAiB,CAC7B,SAAU,CAACC,EAA0B,oBAAqBV,CAAQ,EAClE,QAAS,MAAO,CAAE,UAAAW,EAAY,KAAQ,CACpC,MAAMC,EAAO,MAAMC,EAA6Bb,EAAUW,CAAS,EACnE,OAAAN,EAAkB,CAAC,EAACO,GAAA,MAAAA,EAAM,eAAc,EACjCA,CACR,EACD,iBAAkBE,GAAYA,EAAS,KACvC,eAAgB,SAChB,UAAW,GAAK,IAChB,GAAGb,CACP,CAAG,EAEDc,mBAAU,IAAM,CACd,GAAIP,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMQ,EAAeC,EACnBT,EAAM,MACN,yFACD,EACDL,EAAea,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BX,EAAM,KAAK,CACxD,CAAO,EACDH,EAAkB,EAAK,CACxB,CACF,EAAE,CAACG,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAON,GAAe,IACvB,CACH,ECrCakB,EAAyB,CAACnB,EAAU,KAAO,CACtD,MAAMoB,EAASC,EAAgB,EACzBC,EAAeC,EAAY,CAC/B,WAAYC,EACZ,GAAGxB,CACP,CAAG,EA4BD,MAAO,CACL,GAAGsB,EACH,OA7Ba,MAAOG,EAAUzB,IAAY,CAC1C,KAAM,CAAE,UAAA0B,EAAW,QAAAC,EAAS,GAAGC,CAAiB,EAAG5B,EAEnD,GAAI,CACF,MAAMiB,EAAM,QAAQK,EAAa,YAAYG,EAAUG,CAAe,EAAG,CACvE,QAAS,wBACT,QAAS,CACP,OAAO,CAAE,KAAAjB,GAAQ,CACf,OAAAS,EAAO,kBAAkB,CAACX,EAA0B,aAAa,CAAC,EAClEW,EAAO,kBAAkB,CAACX,EAA0B,cAAc,CAAC,EACnEoB,EAAWH,CAAS,GAAKA,EAAUf,CAAI,EAChC,iCACR,CACF,CACT,CAAO,CACF,OAAQmB,EAAO,CACd,MAAMC,EAAiBf,EACrBc,EACA,8FACD,EACDD,EAAWF,CAAO,GAAKA,EAAQI,CAAc,EAC7Cd,EAAM,MAAMc,EAAgB,CAC1B,KAAMb,EAA+BY,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH","names":["useFindTicketConversation","tickedId","options","customError","setCustomError","useState","setCanCloseTicket","useTicketSupportListStore","state","query","useInfiniteQuery","TICKETS_SUPPORT_LIST_KEYS","pageParam","data","getSupportTicketConversation","lastPage","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","useFinishSupportTicket","client","useQueryClient","finishTicket","useMutation","finishSupportTicket","formData","onSuccess","onError","mutationOptions","isFunction","error","errorFormatted"],"sources":["../../../../../frontend/src/app/support/ticket-support-list/hooks/useFindTicketConversation.js","../../../../../frontend/src/app/support/ticket-support-list/hooks/useFinishSupportTicket.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport { useInfiniteQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { getSupportTicketConversation } from '../services'\r\nimport { useTicketSupportListStore } from '../store'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindTicketConversation = (tickedId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setCanCloseTicket = useTicketSupportListStore(state => state.setCanCloseTicket)\r\n\r\n  const query = useInfiniteQuery({\r\n    queryKey: [TICKETS_SUPPORT_LIST_KEYS.TICKET_CONVERSATION, tickedId],\r\n    queryFn: async ({ pageParam = 1 }) => {\r\n      const data = await getSupportTicketConversation(tickedId, pageParam)\r\n      setCanCloseTicket(!!data?.canCloseTicket)\r\n      return data\r\n    },\r\n    getNextPageParam: lastPage => lastPage.next,\r\n    refetchOnMount: 'always',\r\n    staleTime: 60 * 5000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la conversación del ticket. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n      setCanCloseTicket(false)\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { finishSupportTicket } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useFinishSupportTicket = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const finishTicket = useMutation({\r\n    mutationFn: finishSupportTicket,\r\n    ...options\r\n  })\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, ...mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(finishTicket.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Finalizando Ticket...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.ASSIGNED_LIST])\r\n            client.invalidateQueries([TICKETS_SUPPORT_LIST_KEYS.GENERATED_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n            return 'Se finalizo el ticket con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...finishTicket,\r\n    mutate\r\n  }\r\n}\r\n"],"file":"assets/js/TicketSupportConversationDrawer-_vd4qkiZ.js"}