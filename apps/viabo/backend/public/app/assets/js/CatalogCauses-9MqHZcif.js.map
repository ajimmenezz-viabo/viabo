{"version":3,"mappings":"6kBAAO,MAAMA,EAAuB,CAClC,SAAU,kBACZ,ECAaC,EAAkBC,GAAY,CACzC,MAAMC,EAAkBD,GAAA,YAAAA,EAAU,IAAIE,IAAY,CAChD,GAAIA,GAAA,YAAAA,EAAS,GACb,OAAQA,GAAA,YAAAA,EAAS,OACjB,KAAMA,GAAA,YAAAA,EAAS,KACf,QAASA,GAAA,YAAAA,EAAS,QAClB,MAAO,OAAOA,GAAA,YAAAA,EAAS,KAAK,CAChC,IAEE,OAAOC,EAA4BF,EAAiB,KAAM,OAAQ,QAAQ,CAC5E,ECRaG,EAAqB,SAAY,CAC5C,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMC,EAAM,IAAI,eAAe,EAEhD,OAAOP,EAAgBM,CAAI,CAC7B,ECEaE,EAAkB,CAACC,EAAU,KAAO,CAC/C,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACf,EAAqB,QAAQ,EACxC,QAASM,EACT,UAAW,IACX,GAAGI,CACP,CAAG,EAEDM,mBAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeC,EACnBJ,EAAM,MACN,uFACD,EACDF,EAAeK,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BH,CAAY,CACzD,CAAO,CACF,CACF,EAAE,CAACH,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH,ECnCMU,EAAe,CACnB,aAAc,EAChB,EAEMC,EAAc,CAACC,EAAKC,KAAS,CACjC,GAAGH,EACH,gBAAiBI,GAAQ,CACvBF,EACEG,IAAU,CACR,aAAcD,CACtB,GACM,GACA,oBACD,CACF,CACH,GAEaE,EAAiBC,EAAYN,CAAW,+RCnB9C,MAAMO,EAAkBC,GAAU,gBACvC,OAAQA,GAAA,YAAAA,EAAO,MACf,YAAaA,GAAA,YAAAA,EAAO,YACpB,qBAAoBC,EAAAD,GAAA,YAAAA,EAAO,mBAAP,YAAAC,EAAyB,QAAS,GACtD,oBAAmBC,EAAAF,GAAA,YAAAA,EAAO,kBAAP,YAAAE,EAAwB,QAAS,GACpD,MAAOF,GAAA,YAAAA,EAAO,KAChB,GCJaG,EAAW,MAAMH,GAAS,CACrC,KAAM,CAAE,KAAAvB,CAAI,EAAK,MAAMC,EAAM,KAAK,0BAA2BsB,CAAK,EAElE,OAAOvB,CACT,ECEa2B,EAAoB,CAACxB,EAAU,KAAO,CACjD,MAAMoB,EAAQK,EAAYF,EAAUvB,CAAO,EAqB3C,MAAO,CACL,GAAGoB,EACH,OAtBa,MAAOM,EAAU1B,IAAY,CAC1C,KAAM,CAAE,UAAA2B,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAG7B,EAEhD,GAAI,CACF,MAAMH,EAAO,MAAMY,EAAM,QAAQW,EAAM,YAAYM,EAAUG,CAAe,EAAG,CAC7E,QAAS,2BACjB,CAAO,EACDC,EAAWH,CAAS,GAAKA,EAAU9B,CAAI,CACxC,OAAQkC,EAAO,CACd,MAAMC,EAAiBxB,EACrBuB,EACA,8FACD,EACDD,EAAWF,CAAO,GAAKA,EAAQI,CAAc,EAC7CvB,EAAM,MAAMuB,EAAgB,CAC1B,KAAMtB,EAA+BqB,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH","names":["CATALOGS_SHARED_KEYS","ProfilesAdapter","profiles","profilesAdapted","profile","convertCatalogToReactSelect","getProfilesCatalog","data","axios","useFindProfiles","options","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","initialState","causesStore","set","get","open","state","useCausesStore","createStore","NewCauseAdapter","cause","_a","_b","newCause","useCreateNewCause","useMutation","formData","onSuccess","onError","mutationOptions","isFunction","error","errorFormatted"],"sources":["../../../../../frontend/src/app/catalogs/shared/adapters/catalogs-shared-keys.js","../../../../../frontend/src/app/catalogs/shared/adapters/profiles-adapter.js","../../../../../frontend/src/app/catalogs/shared/services/SharedCatalogsRepository.js","../../../../../frontend/src/app/catalogs/shared/hooks/useFindProfiles.js","../../../../../frontend/src/app/catalogs/causes/store/causes-store.js","../../../../../frontend/src/app/catalogs/causes/adapters/new-cause-adapter.js","../../../../../frontend/src/app/catalogs/causes/services/CausesRepository.js","../../../../../frontend/src/app/catalogs/causes/hooks/useCreateNewCause.js"],"sourcesContent":["export const CATALOGS_SHARED_KEYS = {\r\n  PROFILES: 'profiles-catalog'\r\n}\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const ProfilesAdapter = profiles => {\r\n  const profilesAdapted = profiles?.map(profile => ({\r\n    id: profile?.id,\r\n    status: profile?.active,\r\n    name: profile?.name,\r\n    initUrl: profile?.urlInit,\r\n    level: Number(profile?.level)\r\n  }))\r\n\r\n  return convertCatalogToReactSelect(profilesAdapted, 'id', 'name', 'status')\r\n}\r\n","import { ProfilesAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getProfilesCatalog = async () => {\r\n  const { data } = await axios.get('/api/profiles')\r\n\r\n  return ProfilesAdapter(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { CATALOGS_SHARED_KEYS } from '../adapters'\r\nimport { getProfilesCatalog } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindProfiles = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [CATALOGS_SHARED_KEYS.PROFILES],\r\n    queryFn: getProfilesCatalog,\r\n    staleTime: 60000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener los perfiles del sistema. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(errorMessage)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  openNewCause: false\r\n}\r\n\r\nconst causesStore = (set, get) => ({\r\n  ...initialState,\r\n  setOpenNewCause: open => {\r\n    set(\r\n      state => ({\r\n        openNewCause: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_NEW_CAUSE'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useCausesStore = createStore(causesStore)\r\n","export const NewCauseAdapter = cause => ({\r\n  reason: cause?.cause,\r\n  description: cause?.description,\r\n  applicantProfileId: cause?.requesterProfile?.value || '',\r\n  assignedProfileId: cause?.receptorProfile?.value || '',\r\n  color: cause?.color\r\n})\r\n","import { axios } from '@/shared/interceptors'\r\n\r\nexport const newCause = async cause => {\r\n  const { data } = await axios.post('/api/support-reason/new', cause)\r\n\r\n  return data\r\n}\r\n","import { useMutation } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { newCause } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useCreateNewCause = (options = {}) => {\r\n  const cause = useMutation(newCause, options)\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      const data = await toast.promise(cause.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Guardando nueva causa ...'\r\n      })\r\n      isFunction(onSuccess) && onSuccess(data)\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operaci√≥n en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...cause,\r\n    mutate\r\n  }\r\n}\r\n"],"file":"assets/js/CatalogCauses-9MqHZcif.js"}