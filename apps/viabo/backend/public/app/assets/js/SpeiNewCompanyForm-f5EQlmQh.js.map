{"version":3,"file":"SpeiNewCompanyForm-f5EQlmQh.js","sources":["../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-new-company-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useCreateNewSpeiCompany.js"],"sourcesContent":["import { METHODS_NEW_COMPANY_USERS } from './spei-companies-keys'\n\nexport const SpeiNewCompanyAdapter = company => ({\n  fiscalName: company?.fiscalName?.trim(),\n  rfc: company?.rfc?.trim(),\n  commercialName: company?.commercialName?.trim(),\n  isNewUser: company?.method === METHODS_NEW_COMPANY_USERS.NEW_ADMIN_USER,\n  assignedUsers: company?.adminUsers?.map(user => user.value) || [],\n  newUserName: company?.adminName?.trim(),\n  newUserLastName: company?.adminLastName?.trim(),\n  newUserEmail: company?.adminEmail?.trim(),\n  newUserPhone: company?.adminPhone?.trim(),\n  costCenters: company?.costCenters?.map(user => user.value) || [],\n  hasViaboCard: company?.hasViaboCard\n})\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { newSpeiCompany } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useCreateNewSpeiCompany = (options = {}) => {\n  const client = useQueryClient()\n  const company = useMutation(newSpeiCompany, options)\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, mutationOptions } = options\n\n    try {\n      await toast.promise(company.mutateAsync(formData, mutationOptions), {\n        pending: 'Creando empresa...',\n        success: {\n          render({ data }) {\n            // client.invalidateQueries([SPEI_THIRD_ACCOUNTS_KEYS.THIRD_ACCOUNTS_LIST])\n            isFunction(onSuccess) && onSuccess(data)\n\n            return 'Se creó la empresa con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...company,\n    mutate\n  }\n}\n"],"names":["SpeiNewCompanyAdapter","company","_a","_b","_c","METHODS_NEW_COMPANY_USERS","_d","user","_e","_f","_g","_h","_i","useCreateNewSpeiCompany","options","useQueryClient","useMutation","newSpeiCompany","formData","onSuccess","onError","mutationOptions","toast","data","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode"],"mappings":"i4BAEO,MAAMA,EAAwBC,GAAY,uBAAA,OAC/C,YAAYC,EAAAD,GAAA,YAAAA,EAAS,aAAT,YAAAC,EAAqB,OACjC,KAAKC,EAAAF,GAAA,YAAAA,EAAS,MAAT,YAAAE,EAAc,OACnB,gBAAgBC,EAAAH,GAAA,YAAAA,EAAS,iBAAT,YAAAG,EAAyB,OACzC,WAAWH,GAAA,YAAAA,EAAS,UAAWI,EAA0B,eACzD,gBAAeC,EAAAL,GAAA,YAAAA,EAAS,aAAT,YAAAK,EAAqB,IAAIC,GAAQA,EAAK,SAAU,CAAE,EACjE,aAAaC,EAAAP,GAAA,YAAAA,EAAS,YAAT,YAAAO,EAAoB,OACjC,iBAAiBC,EAAAR,GAAA,YAAAA,EAAS,gBAAT,YAAAQ,EAAwB,OACzC,cAAcC,EAAAT,GAAA,YAAAA,EAAS,aAAT,YAAAS,EAAqB,OACnC,cAAcC,EAAAV,GAAA,YAAAA,EAAS,aAAT,YAAAU,EAAqB,OACnC,cAAaC,EAAAX,GAAA,YAAAA,EAAS,cAAT,YAAAW,EAAsB,IAAIL,GAAQA,EAAK,SAAU,CAAE,EAChE,aAAcN,GAAA,YAAAA,EAAS,YACzB,GCNaY,EAA0B,CAACC,EAAU,KAAO,CACxCC,EAAgB,EAC/B,MAAMd,EAAUe,EAAYC,EAAgBH,CAAO,EA4BnD,MAAO,CACL,GAAGb,EACH,OA7Ba,MAAOiB,EAAUJ,IAAY,CAC1C,KAAM,CAAE,UAAAK,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGP,EAEhD,GAAI,CACF,MAAMQ,EAAM,QAAQrB,EAAQ,YAAYiB,EAAUG,CAAe,EAAG,CAClE,QAAS,qBACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CAEf,OAAAC,EAAWL,CAAS,GAAKA,EAAUI,CAAI,EAEhC,8BACR,CACF,CACT,CAAO,CACF,OAAQE,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWJ,CAAO,GAAKA,EAAQM,CAAc,EAC7CJ,EAAM,MAAMI,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH"}