{"version":3,"mappings":"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","names":["initialState","speiCompaniesStore","set","get","company","state","open","useSpeiCompaniesStore","createStore","ViaboSpeiCompaniesTableActions","table","isChangingCauseStatus","causeIdToggleStatus","onChangeStatus","row","original","rowData","status","isChangingStatus","id","setSpeiCompany","setOpenNewSpeiCompany","jsxs","Box","display","flex","justifyContent","alignItems","flexWrap","gap","jsx","CircularLoading","ml","IOSSwitch","e","stopPropagation","IconButton","Edit","propTypes","PropTypes","any","func","shape","bool","SpeiAdminCompanyUsersAdapter","users","usersAdapted","user","convertCatalogToReactSelect","SPEI_COMPANIES_KEYS","METHODS_NEW_COMPANY_USERS","SpeiCompaniesListAdapter","companies","fCurrency","_a","SpeiCompanyDetailsAdapter","_b","costCenter","getSpeiCompaniesList","data","axios","newSpeiCompany","getViaboSpeiAdminCompanyUsers","changeSpeiCompanyStatus","fetchURL","getViaboSpeiCompanyDetails","companyId","updateViaboSpeiCompany","useChangeSpeiCompanyStatus","options","client","useQueryClient","changeStatus","useMutation","formData","onSuccess","onError","mutationOptions","toast","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useFindSpeiCompanies","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","useSpeiCompaniesTableColumns","useMemo","accessorKey","header","enableHiding","maxSize","Cell","cell","column","renderedCellValue","Typography","enableClickToCopy","accessorFn","originalRow","stpAccount","complete","hidden","minSize","ViaboSpeiCompaniesList","isLoading","isError","isFetching","columns","openConfirmation","setOpenConfirmation","setCauseIdToggleStatus","companyData","setCompanyData","mutate","toggleStatus","handleSuccessChangeStatus","useMaterialTable","enableColumnPinning","enableColumnFilterModes","enableStickyHeader","enableRowVirtualization","enableFacetedValues","enableRowActions","enableRowSelection","enableDensityToggle","positionActionsColumn","selectAllMode","density","sorting","desc","showAlertBanner","showProgressBars","displayColumnDefOptions","muiTableContainerProps","sx","maxHeight","md","lg","xl","muiTableBodyRowProps","theme","backgroundColor","palette","action","selected","hover","enableColumnResizing","layoutMode","renderTopToolbarCustomActions","renderRowActions","Fragment","Card","getState","isFullScreen","boxShadow","customShadows","z24","mode","grey","backdropFilter","WebkitBackdropFilter","CardHeader","pb","length","Tooltip","Add","MaterialDataTable","ModalAlert","Stack","ToggleOffTwoTone","ToggleOnTwoTone","borderStyle","name","rfc","fontWeight","SpeiNewCompanyDrawer","Lodable","lazy","__vitePreload","ViaboSpeiCompanies","useViaboSpeiBreadCrumbs","Page","ContainerPage","HeaderPage"],"sources":["../../../../../frontend/src/app/business/viabo-spei/companies/store/spei-companies-store.js","../../../../../frontend/src/app/business/viabo-spei/companies/components/ViaboSpeiCompaniesTableActions.jsx","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-admin-company-users-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-keys.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-list-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-company-details-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/services/SpeiCompaniesRepository.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useChangeSpeiCompanyStatus.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCompanies.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useSpeiCompaniesTableColumns.jsx","../../../../../frontend/src/app/business/viabo-spei/companies/components/ViaboSpeiCompaniesList.jsx","../../../../../frontend/src/app/business/viabo-spei/companies/pages/ViaboSpeiCompanies.jsx"],"sourcesContent":["import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  company: null,\r\n  openNewCompany: false\r\n}\r\nconst speiCompaniesStore = (set, get) => ({\r\n  ...initialState,\r\n  setSpeiCompany: company => {\r\n    set(\r\n      state => ({\r\n        company\r\n      }),\r\n      false,\r\n      'SET_SPEI_COMPANY'\r\n    )\r\n  },\r\n  setOpenNewSpeiCompany: open => {\r\n    set(\r\n      state => ({\r\n        openNewCompany: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_SPEI_NEW_COMPANY'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useSpeiCompaniesStore = createStore(speiCompaniesStore)\r\n","import PropTypes from 'prop-types'\r\n\r\nimport { Edit } from '@mui/icons-material'\r\nimport { Box, IconButton } from '@mui/material'\r\n\r\nimport { useSpeiCompaniesStore } from '../store'\r\n\r\nimport { IOSSwitch } from '@/shared/components/form'\r\nimport { CircularLoading } from '@/shared/components/loadings'\r\n\r\nexport function ViaboSpeiCompaniesTableActions({ table, isChangingCauseStatus, causeIdToggleStatus, onChangeStatus }) {\r\n  const { row } = table\r\n  const { original: rowData } = row\r\n  const { status } = rowData\r\n\r\n  const isChangingStatus = isChangingCauseStatus && causeIdToggleStatus === rowData?.id\r\n  const { setSpeiCompany, setOpenNewSpeiCompany } = useSpeiCompaniesStore()\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flex: 1,\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        flexWrap: 'nowrap',\r\n        gap: '8px'\r\n      }}\r\n    >\r\n      {isChangingStatus ? (\r\n        <CircularLoading\r\n          size={15}\r\n          containerProps={{\r\n            display: 'flex',\r\n            ml: 1\r\n          }}\r\n        />\r\n      ) : (\r\n        <IOSSwitch\r\n          size=\"md\"\r\n          color={!status ? 'error' : 'success'}\r\n          checked={status || false}\r\n          inputProps={{ 'aria-label': 'controlled' }}\r\n          onClick={e => {\r\n            e.stopPropagation()\r\n            onChangeStatus(rowData)\r\n          }}\r\n        />\r\n      )}\r\n      {status && (\r\n        <IconButton\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          onClick={e => {\r\n            e.stopPropagation()\r\n            setSpeiCompany(rowData)\r\n            setOpenNewSpeiCompany(true)\r\n          }}\r\n        >\r\n          <Edit size=\"small\" fontSize=\"16px\" />\r\n        </IconButton>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nViaboSpeiCompaniesTableActions.propTypes = {\r\n  causeIdToggleStatus: PropTypes.any,\r\n  isChangingCauseStatus: PropTypes.any,\r\n  onChangeStatus: PropTypes.func,\r\n  table: PropTypes.shape({\r\n    row: PropTypes.shape({\r\n      original: PropTypes.shape({\r\n        id: PropTypes.any,\r\n        status: PropTypes.bool\r\n      })\r\n    })\r\n  })\r\n}\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const SpeiAdminCompanyUsersAdapter = users => {\r\n  const usersAdapted = users?.map(user => ({\r\n    id: user?.id,\r\n    name: user?.name\r\n  }))\r\n\r\n  return convertCatalogToReactSelect(usersAdapted, 'id', 'name')\r\n}\r\n","export const SPEI_COMPANIES_KEYS = {\r\n  COMPANIES_LIST: 'spei-companies-list',\r\n  USERS_ADMIN_COMPANY_LIST: 'spei-admin-company-users-list',\r\n  COMPANY_DETAILS: 'spei-company-details'\r\n}\r\n\r\nexport const METHODS_NEW_COMPANY_USERS = {\r\n  ADMIN_USERS: 'users',\r\n  NEW_ADMIN_USER: 'new-user'\r\n}\r\n","import { fCurrency } from '@/shared/utils'\r\n\r\nexport const SpeiCompaniesListAdapter = companies => {\r\n  const companiesAdapted =\r\n    companies?.map(company => ({\r\n      id: company?.id,\r\n      folio: company?.folio,\r\n      name: company?.tradeName,\r\n      balance: fCurrency(company?.balance || '0'),\r\n      status: company?.active === '1',\r\n      rfc: company?.rfc,\r\n      stpAccount: {\r\n        complete: company?.bankAccount,\r\n        hidden: company?.bankAccount?.replace(/.(?=.{8})/g, '*')\r\n      }\r\n    })) || []\r\n\r\n  return companiesAdapted\r\n}\r\n","export const SpeiCompanyDetailsAdapter = company => {\r\n  const companyAdapted = {\r\n    id: company?.id,\r\n    commercialName: company?.tradeName,\r\n    fiscalName: company?.fiscalName,\r\n    rfc: company?.rfc,\r\n    adminUsers: company?.users?.map(user => user?.id) || [],\r\n    costCenters: company?.costCenters?.map(costCenter => costCenter?.id) || []\r\n  }\r\n\r\n  return companyAdapted\r\n}\r\n","import { SpeiAdminCompanyUsersAdapter, SpeiCompaniesListAdapter, SpeiCompanyDetailsAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getSpeiCompaniesList = async () => {\r\n  const { data } = await axios.get('/api/commerces')\r\n  return SpeiCompaniesListAdapter(data)\r\n}\r\n\r\nexport const newSpeiCompany = async company => {\r\n  const { data } = await axios.post('/api/backoffice/company/new', company)\r\n  return data\r\n}\r\n\r\nexport const getViaboSpeiAdminCompanyUsers = async () => {\r\n  const { data } = await axios.get('/api/security/users/administrators-of-companies')\r\n\r\n  return SpeiAdminCompanyUsersAdapter(data)\r\n}\r\n\r\nexport const changeSpeiCompanyStatus = async company => {\r\n  const fetchURL = new URL('/api/backoffice/company/toggle', window.location.origin)\r\n\r\n  fetchURL.searchParams.set('company', company?.id)\r\n  fetchURL.searchParams.set('active', company?.changeStatus)\r\n\r\n  const { data } = await axios.put(fetchURL)\r\n\r\n  return company\r\n}\r\n\r\nexport const getViaboSpeiCompanyDetails = async companyId => {\r\n  const { data } = await axios.get(`/api/backoffice/company/${companyId}`)\r\n\r\n  return SpeiCompanyDetailsAdapter(data)\r\n}\r\n\r\nexport const updateViaboSpeiCompany = async company => {\r\n  const { data } = await axios.put('/api/backoffice/company/update', company)\r\n\r\n  return company\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { changeSpeiCompanyStatus } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useChangeSpeiCompanyStatus = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const changeStatus = useMutation({\r\n    mutationFn: changeSpeiCompanyStatus,\r\n    ...options\r\n  })\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, ...mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(changeStatus.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Actualizando estado de la empresa...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANIES_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n            return 'Se actualizó el estado de la empresa con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...changeStatus,\r\n    mutate\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { getSpeiCompaniesList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCompanies = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COMPANIES_KEYS.COMPANIES_LIST],\r\n    queryFn: getSpeiCompaniesList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de empresas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMemo } from 'react'\r\n\r\nimport { Typography } from '@mui/material'\r\n\r\nexport const useSpeiCompaniesTableColumns = () =>\r\n  useMemo(\r\n    () => [\r\n      {\r\n        id: 'folio',\r\n        accessorKey: 'folio',\r\n        header: 'ID',\r\n        enableHiding: false,\r\n        maxSize: 50,\r\n        Cell: ({ cell, column, row, renderedCellValue }) => (\r\n          <Typography variant=\"subtitle2\">{renderedCellValue}</Typography>\r\n        )\r\n      },\r\n      {\r\n        id: 'rfc',\r\n        accessorKey: 'rfc',\r\n        header: 'RFC',\r\n        Cell: ({ cell, column, row, renderedCellValue }) => {\r\n          const { original: rowData } = row\r\n          return (\r\n            <Typography textTransform={'uppercase'} variant=\"subtitle2\">\r\n              {renderedCellValue}\r\n            </Typography>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        id: 'name',\r\n        accessorKey: 'name',\r\n        header: 'Nombre',\r\n        enableHiding: false,\r\n        Cell: ({ cell, column, row, renderedCellValue }) => (\r\n          <Typography textTransform={'capitalize'} fontWeight={'bold'} variant=\"subtitle2\">\r\n            {renderedCellValue}\r\n          </Typography>\r\n        )\r\n      },\r\n\r\n      {\r\n        id: 'stpAccount',\r\n        header: 'Cuenta STP',\r\n        enableClickToCopy: true,\r\n        accessorFn: originalRow => originalRow?.stpAccount?.complete || null,\r\n        Cell: ({ cell, column, row, renderedCellValue }) => {\r\n          const { original: rowData } = row\r\n\r\n          return <Typography variant=\"subtitle2\">{rowData?.stpAccount?.hidden}</Typography>\r\n        }\r\n      },\r\n      {\r\n        id: 'balance',\r\n        accessorKey: 'balance',\r\n        header: 'Balance',\r\n        minSize: 100,\r\n        Cell: ({ cell, column, row, renderedCellValue }) => {\r\n          const { original: rowData } = row\r\n          return <Typography variant=\"subtitle2\">{renderedCellValue}</Typography>\r\n        }\r\n      }\r\n    ],\r\n    []\r\n  )\r\n","import { useState } from 'react'\r\n\r\nimport { Add, ToggleOffTwoTone, ToggleOnTwoTone } from '@mui/icons-material'\r\nimport { Box, Card, CardHeader, IconButton, Stack, Tooltip, Typography } from '@mui/material'\r\n\r\nimport { ViaboSpeiCompaniesTableActions } from './ViaboSpeiCompaniesTableActions'\r\n\r\nimport { useChangeSpeiCompanyStatus, useSpeiCompaniesTableColumns } from '../hooks'\r\nimport { useFindSpeiCompanies } from '../hooks/useFindSpeiCompanies'\r\nimport { useSpeiCompaniesStore } from '../store'\r\n\r\nimport { MaterialDataTable } from '@/shared/components/dataTables'\r\nimport { ModalAlert } from '@/shared/components/modals'\r\nimport { useMaterialTable } from '@/shared/hooks'\r\n\r\nexport const ViaboSpeiCompaniesList = () => {\r\n  const { data: companies, isLoading, isError, error, isFetching } = useFindSpeiCompanies()\r\n\r\n  const { setOpenNewSpeiCompany } = useSpeiCompaniesStore()\r\n\r\n  const columns = useSpeiCompaniesTableColumns()\r\n\r\n  const [openConfirmation, setOpenConfirmation] = useState(false)\r\n  const [causeIdToggleStatus, setCauseIdToggleStatus] = useState(null)\r\n  const [companyData, setCompanyData] = useState(null)\r\n  const { mutate: toggleStatus, isLoading: isChangingCauseStatus } = useChangeSpeiCompanyStatus()\r\n\r\n  const handleSuccessChangeStatus = () => {\r\n    setOpenConfirmation(false)\r\n    toggleStatus(\r\n      { ...companyData, changeStatus: !companyData?.status },\r\n      {\r\n        onSuccess: () => {\r\n          setCauseIdToggleStatus(null)\r\n          setCompanyData(null)\r\n        },\r\n        onError: () => {\r\n          setCauseIdToggleStatus(null)\r\n          setCompanyData(null)\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  const table = useMaterialTable(isError, error, {\r\n    columns,\r\n    data: companies || [],\r\n    enableColumnPinning: true,\r\n    enableColumnFilterModes: true,\r\n    enableStickyHeader: true,\r\n    enableRowVirtualization: true,\r\n    enableFacetedValues: true,\r\n    enableRowActions: true,\r\n    enableRowSelection: true,\r\n    enableDensityToggle: false,\r\n    positionActionsColumn: 'last',\r\n    selectAllMode: 'all',\r\n    initialState: {\r\n      density: 'compact',\r\n      sorting: [\r\n        {\r\n          id: 'folio',\r\n          desc: false\r\n        }\r\n      ]\r\n    },\r\n    state: {\r\n      isLoading,\r\n      showAlertBanner: isError,\r\n      showProgressBars: isFetching\r\n    },\r\n    displayColumnDefOptions: {\r\n      'mrt-row-select': {\r\n        maxSize: 10\r\n      },\r\n      'mrt-row-actions': {\r\n        header: 'Acciones',\r\n        maxSize: 80\r\n      }\r\n    },\r\n    muiTableContainerProps: { sx: { maxHeight: { md: '350px', lg: '450px', xl: '700px' } } },\r\n    muiTableBodyRowProps: ({ row }) => ({\r\n      sx: theme => ({\r\n        backgroundColor: 'inherit',\r\n        '&.Mui-selected': {\r\n          backgroundColor: theme.palette.action.selected,\r\n          '&:hover': {\r\n            backgroundColor: theme.palette.action.hover\r\n          }\r\n        }\r\n      })\r\n    }),\r\n    enableColumnResizing: true,\r\n    layoutMode: 'grid',\r\n    renderTopToolbarCustomActions: () => <Box></Box>,\r\n    renderRowActions: table => (\r\n      <ViaboSpeiCompaniesTableActions\r\n        table={table}\r\n        isChangingCauseStatus={isChangingCauseStatus}\r\n        onChangeStatus={rowData => {\r\n          setCompanyData(rowData)\r\n          setCauseIdToggleStatus(rowData?.id)\r\n          setOpenConfirmation(true)\r\n        }}\r\n        causeIdToggleStatus={causeIdToggleStatus}\r\n      />\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        variant=\"outlined\"\r\n        sx={theme =>\r\n          !table.getState().isFullScreen\r\n            ? {\r\n                boxShadow: theme.customShadows.z24,\r\n                backgroundColor: theme.palette.mode === 'light' ? 'inherit' : theme.palette.grey[500_12],\r\n                backdropFilter: `blur(10px)`,\r\n                WebkitBackdropFilter: `blur(10px)`\r\n              }\r\n            : {}\r\n        }\r\n      >\r\n        <CardHeader\r\n          sx={theme => ({\r\n            pb: 2\r\n          })}\r\n          title=\"Lista de Empresas\"\r\n          subheader={`Tienes ${companies?.length || 0} empresas dadas de alta`}\r\n          action={\r\n            <Tooltip title=\"Nueva Empresa\">\r\n              <IconButton color=\"primary\" size=\"large\" onClick={() => setOpenNewSpeiCompany(true)}>\r\n                <Add />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <MaterialDataTable table={table} />\r\n      </Card>\r\n      <ModalAlert\r\n        title={\r\n          <Stack alignItems={'center'} justifyContent={'space-between'} flexDirection={'row'}>\r\n            <Typography variant=\"h6\">{companyData?.status ? 'Desactivar Empresa' : 'Activar Empresa'}</Typography>\r\n            {companyData?.status ? <ToggleOffTwoTone color=\"error\" /> : <ToggleOnTwoTone color=\"success\" />}\r\n          </Stack>\r\n        }\r\n        textButtonSuccess=\"Si\"\r\n        textButtonCancel=\"No\"\r\n        onClose={() => {\r\n          setOpenConfirmation(false)\r\n        }}\r\n        open={openConfirmation}\r\n        actionsProps={{ sx: { justifyContent: 'center' } }}\r\n        description={\r\n          <Stack spacing={3}>\r\n            <Stack spacing={0.5} p={2} borderColor={'secondary.light'} borderRadius={2} sx={{ borderStyle: 'dotted' }}>\r\n              <Typography fontWeight={'bold'} variant=\"subtitle2\">\r\n                {companyData?.name}\r\n              </Typography>\r\n              <Typography variant=\"subtitle2\">{companyData?.rfc}</Typography>\r\n              <Typography variant=\"subtitle2\">{companyData?.stpAccount?.hidden}</Typography>\r\n            </Stack>\r\n\r\n            <Typography textAlign={'center'}>\r\n              ¿Está seguro de{' '}\r\n              <Box component={'span'} sx={{ fontWeight: 'bold' }}>{`${\r\n                companyData?.status ? 'Desactivar' : 'Activar'\r\n              }`}</Box>{' '}\r\n              la empresa?\r\n            </Typography>\r\n          </Stack>\r\n        }\r\n        onSuccess={handleSuccessChangeStatus}\r\n        fullWidth\r\n        maxWidth=\"xs\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { lazy } from 'react'\r\n\r\nimport { useViaboSpeiBreadCrumbs } from '../../shared/hooks'\r\nimport { ViaboSpeiCompaniesList } from '../components/ViaboSpeiCompaniesList'\r\n\r\nimport { Page } from '@/shared/components/containers'\r\nimport { ContainerPage } from '@/shared/components/containers/ContainerPage'\r\nimport { HeaderPage } from '@/shared/components/layout'\r\nimport { Lodable } from '@/shared/components/lodables'\r\n\r\nconst SpeiNewCompanyDrawer = Lodable(lazy(() => import('../components/new-company/SpeiNewCompanyDrawer')))\r\n\r\nexport const ViaboSpeiCompanies = () => {\r\n  const { companies } = useViaboSpeiBreadCrumbs()\r\n\r\n  return (\r\n    <Page title=\"Empresas - Viabo Spei\">\r\n      <ContainerPage sx={{ pb: 3 }}>\r\n        <HeaderPage name={'Empresas'} links={companies} />\r\n        <ViaboSpeiCompaniesList />\r\n        <SpeiNewCompanyDrawer />\r\n      </ContainerPage>\r\n    </Page>\r\n  )\r\n}\r\n"],"file":"assets/js/ViaboSpeiCompanies-CKRJZiEW.js"}