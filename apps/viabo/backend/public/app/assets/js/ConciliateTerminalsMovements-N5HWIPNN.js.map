{"version":3,"file":"ConciliateTerminalsMovements-N5HWIPNN.js","sources":["../../../../../frontend/src/app/business/viabo-pay/terminals/adapters/conciliate-terminal-movements-adapter.js","../../../../../frontend/src/app/business/viabo-pay/terminals/hooks/useConciliateTerminalMovements.js","../../../../../frontend/src/app/business/viabo-pay/terminals/hooks/useFindMovementsToConciliateTerminal.js"],"sourcesContent":["export const ConciliateTerminalMovementsAdapter = (terminal, terminalMovements, cardMovement) => {\r\n  const terminalMovementsAdapter =\r\n    terminalMovements?.map(terminalMovement => ({\r\n      transactionId: terminalMovement?.id?.toString(),\r\n      amount: terminalMovement?.amount?.toString()\r\n    })) ?? []\r\n\r\n  return {\r\n    terminalId: terminal?.terminalId,\r\n    speiCardTransactionId: cardMovement?.id?.toString(),\r\n    speiCardTransactionAmount: cardMovement?.amount?.toString(),\r\n    transactions: terminalMovementsAdapter\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TERMINALS_KEYS } from '../adapters'\r\nimport { conciliateTerminalMovements } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useConciliateTerminalMovements = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const conciliateOrder = useMutation(conciliateTerminalMovements, options)\r\n  const conciliate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(conciliateOrder.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Conciliando movimientos de la terminal ...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([TERMINALS_KEYS.MOVEMENTS, formData?.terminalId])\r\n            onSuccess(data)\r\n            return 'Se creó la conciliación con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...conciliateOrder,\r\n    mutate: conciliate\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { format } from 'date-fns'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TERMINALS_KEYS } from '../adapters'\r\nimport { getMovementsToConciliateTerminal } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindMovementsToConciliateTerminal = (terminalId, date, options = {}) => {\r\n  const finalDate = format(date, 'yyyy-MM-dd')\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const key = terminalId ? [TERMINALS_KEYS.CONCILIATE_MOVEMENTS, terminalId] : [TERMINALS_KEYS.MOVEMENTS, 'global']\r\n  const commerces = useQuery(key, ({ signal }) => getMovementsToConciliateTerminal(terminalId, finalDate, signal), {\r\n    staleTime: 60000,\r\n    refetchOnWindowFocus: false,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(\r\n        error,\r\n        'No se puede obtener la lista de movimientos para conciliar la terminal. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"names":["ConciliateTerminalMovementsAdapter","terminal","terminalMovements","cardMovement","terminalMovementsAdapter","terminalMovement","_a","_b","useConciliateTerminalMovements","options","client","useQueryClient","conciliateOrder","useMutation","conciliateTerminalMovements","formData","onSuccess","onError","mutationOptions","toast","data","TERMINALS_KEYS","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useFindMovementsToConciliateTerminal","terminalId","date","finalDate","format","customError","setCustomError","useState","key","useQuery","signal","getMovementsToConciliateTerminal","errorMessage"],"mappings":"q/BAAO,MAAMA,GAAqC,CAACC,EAAUC,EAAmBC,IAAiB,SAC/F,MAAMC,GACJF,GAAA,YAAAA,EAAmB,IAAIG,GAAqB,SAAA,OAC1C,eAAeC,EAAAD,GAAA,YAAAA,EAAkB,KAAlB,YAAAC,EAAsB,WACrC,QAAQC,EAAAF,GAAA,YAAAA,EAAkB,SAAlB,YAAAE,EAA0B,UACnC,MAAM,CAAE,EAEX,MAAO,CACL,WAAYN,GAAA,YAAAA,EAAU,WACtB,uBAAuBK,EAAAH,GAAA,YAAAA,EAAc,KAAd,YAAAG,EAAkB,WACzC,2BAA2BC,EAAAJ,GAAA,YAAAA,EAAc,SAAd,YAAAI,EAAsB,WACjD,aAAcH,CACf,CACH,ECLaI,GAAiC,CAACC,EAAU,KAAO,CAC9D,MAAMC,EAASC,EAAgB,EACzBC,EAAkBC,EAAYC,EAA6BL,CAAO,EA2BxE,MAAO,CACL,GAAGG,EACH,OA5BiB,MAAOG,EAAUN,IAAY,CAC9C,KAAM,CAAE,UAAAO,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGT,EAEhD,GAAI,CACF,MAAMU,EAAM,QAAQP,EAAgB,YAAYG,EAAUG,CAAe,EAAG,CAC1E,QAAS,6CACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CACf,OAAAV,EAAO,kBAAkB,CAACW,EAAe,UAAWN,GAAA,YAAAA,EAAU,UAAU,CAAC,EACzEC,EAAUI,CAAI,EACP,mCACR,CACF,CACT,CAAO,CACF,OAAQE,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDL,EAAQM,CAAc,EACtBJ,EAAM,MAAMI,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH,EC9BaI,GAAuC,CAACC,EAAYC,EAAMnB,EAAU,CAAA,IAAO,CACtF,MAAMoB,EAAYC,EAAOF,EAAM,YAAY,EACrC,CAACG,EAAaC,CAAc,EAAIC,EAAAA,SAAS,IAAI,EAE7CC,EAAMP,EAAa,CAACN,EAAe,qBAAsBM,CAAU,EAAI,CAACN,EAAe,UAAW,QAAQ,EAgBhH,MAAO,CACL,GAhBgBc,EAASD,EAAK,CAAC,CAAE,OAAAE,CAAM,IAAOC,EAAiCV,EAAYE,CAAiB,EAAG,CAC/G,UAAW,IACX,qBAAsB,GACtB,QAASP,GAAS,CAChB,MAAMgB,EAAed,EACnBF,EACA,iHACD,EACDU,EAAeM,CAAY,EAC3BnB,EAAM,MAAMmB,EAAc,CACxB,KAAMb,EAA+BH,CAAK,CAClD,CAAO,CACF,EACD,GAAGb,CACP,CAAG,EAGC,MAAOsB,GAAe,IACvB,CACH"}