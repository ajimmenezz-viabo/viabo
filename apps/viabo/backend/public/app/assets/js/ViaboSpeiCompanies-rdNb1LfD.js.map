{"version":3,"mappings":"qkBAEA,MAAMA,GAAe,CACnB,QAAS,KACT,eAAgB,EAClB,EACMC,GAAqB,CAACC,EAAKC,KAAS,CACxC,GAAGH,GACH,eAAgBI,GAAW,CACzBF,EACEG,IAAU,CACR,QAAAD,CACR,GACM,GACA,kBACD,CACF,EACD,sBAAuBE,GAAQ,CAC7BJ,EACEG,IAAU,CACR,eAAgBC,CACxB,GACM,GACA,2BACD,CACF,CACH,GAEaC,EAAwBC,EAAYP,EAAkB,s0BC1B5D,MAAMQ,GAA+BC,GAAS,CACnD,MAAMC,EAAeD,GAAA,YAAAA,EAAO,IAAIE,IAAS,CACvC,GAAIA,GAAA,YAAAA,EAAM,GACV,KAAMA,GAAA,YAAAA,EAAM,IAChB,IAEE,OAAOC,EAA4BF,EAAc,KAAM,MAAM,CAC/D,ECTaG,EAAsB,CACjC,eAAgB,sBAChB,yBAA0B,gCAC1B,gBAAiB,sBACnB,EAEaC,GAA4B,CACvC,YAAa,QACb,eAAgB,UAClB,ECPaC,GAA2BC,IAEpCA,GAAA,YAAAA,EAAW,IAAIb,GAAY,cACzB,GAAIA,GAAA,YAAAA,EAAS,GACb,MAAOA,GAAA,YAAAA,EAAS,MAChB,KAAMA,GAAA,YAAAA,EAAS,UACf,QAASc,IAAUd,GAAA,YAAAA,EAAS,UAAW,GAAG,EAC1C,QAAQA,GAAA,YAAAA,EAAS,UAAW,IAC5B,IAAKA,GAAA,YAAAA,EAAS,IACd,WAAY,CACV,SAAUA,GAAA,YAAAA,EAAS,YACnB,QAAQe,EAAAf,GAAA,YAAAA,EAAS,cAAT,YAAAe,EAAsB,QAAQ,aAAc,IACrD,CACF,MAAM,CAAE,ECfAC,GAA4BhB,GAAW,SAUlD,MATuB,CACrB,GAAIA,GAAA,YAAAA,EAAS,GACb,eAAgBA,GAAA,YAAAA,EAAS,UACzB,WAAYA,GAAA,YAAAA,EAAS,WACrB,IAAKA,GAAA,YAAAA,EAAS,IACd,aAAYe,EAAAf,GAAA,YAAAA,EAAS,QAAT,YAAAe,EAAgB,IAAIP,GAAQA,GAAA,YAAAA,EAAM,MAAO,CAAE,EACvD,cAAaS,EAAAjB,GAAA,YAAAA,EAAS,cAAT,YAAAiB,EAAsB,IAAIC,GAAcA,GAAA,YAAAA,EAAY,MAAO,CAAE,CAC3E,CAGH,ECPaC,GAAuB,SAAY,CAC9C,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMC,EAAM,IAAI,gBAAgB,EACjD,OAAOT,GAAyBQ,CAAI,CACtC,EAEaE,GAAiB,MAAMtB,GAAW,CAC7C,KAAM,CAAE,KAAAoB,CAAI,EAAK,MAAMC,EAAM,KAAK,8BAA+BrB,CAAO,EACxE,OAAOoB,CACT,EAEaG,GAAgC,SAAY,CACvD,KAAM,CAAE,KAAAH,CAAM,EAAG,MAAMC,EAAM,IAAI,iDAAiD,EAElF,OAAOhB,GAA6Be,CAAI,CAC1C,EAEaI,GAA0B,MAAMxB,GAAW,CACtD,MAAMyB,EAAW,IAAI,IAAI,iCAAkC,OAAO,SAAS,MAAM,EAEjF,OAAAA,EAAS,aAAa,IAAI,UAAWzB,GAAA,YAAAA,EAAS,EAAE,EAChDyB,EAAS,aAAa,IAAI,SAAUzB,GAAA,YAAAA,EAAS,YAAY,EAExC,MAAMqB,EAAM,IAAII,CAAQ,EAElCzB,CACT,EAEa0B,GAA6B,MAAMC,GAAa,CAC3D,KAAM,CAAE,KAAAP,CAAM,EAAG,MAAMC,EAAM,IAAI,2BAA2BM,CAAS,EAAE,EAEvE,OAAOX,GAA0BI,CAAI,CACvC,EAEaQ,GAAyB,MAAM5B,IACzB,MAAMqB,EAAM,IAAI,iCAAkCrB,CAAO,EAEnEA,GC/BI6B,GAA6B,CAACC,EAAU,KAAO,CAC1D,MAAMC,EAASC,EAAgB,EACzBC,EAAeC,EAAY,CAC/B,WAAYV,GACZ,GAAGM,CACP,CAAG,EA2BD,MAAO,CACL,GAAGG,EACH,OA5Ba,MAAOE,EAAUL,IAAY,CAC1C,KAAM,CAAE,UAAAM,EAAW,QAAAC,EAAS,GAAGC,CAAiB,EAAGR,EAEnD,GAAI,CACF,MAAMS,EAAM,QAAQN,EAAa,YAAYE,EAAUG,CAAe,EAAG,CACvE,QAAS,uCACT,QAAS,CACP,OAAO,CAAE,KAAAlB,GAAQ,CACf,OAAAW,EAAO,kBAAkB,CAACrB,EAAoB,cAAc,CAAC,EAC7D8B,EAAWJ,CAAS,GAAKA,EAAUhB,CAAI,EAChC,gDACR,CACF,CACT,CAAO,CACF,OAAQqB,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWH,CAAO,GAAKA,EAAQK,CAAc,EAC7CH,EAAM,MAAMG,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH,ECnCaI,GAAuB,CAACf,EAAU,KAAO,CACpD,KAAM,CAACgB,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACxC,EAAoB,cAAc,EAC7C,QAASS,GACT,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGW,CACP,CAAG,EAEDqB,mBAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeT,EACnBM,EAAM,MACN,mFACD,EACDF,EAAeK,CAAY,EAC3Bb,EAAM,MAAMa,EAAc,CACxB,KAAMR,EAA+BK,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH","names":["initialState","speiCompaniesStore","set","get","company","state","open","useSpeiCompaniesStore","createStore","SpeiAdminCompanyUsersAdapter","users","usersAdapted","user","convertCatalogToReactSelect","SPEI_COMPANIES_KEYS","METHODS_NEW_COMPANY_USERS","SpeiCompaniesListAdapter","companies","fCurrency","_a","SpeiCompanyDetailsAdapter","_b","costCenter","getSpeiCompaniesList","data","axios","newSpeiCompany","getViaboSpeiAdminCompanyUsers","changeSpeiCompanyStatus","fetchURL","getViaboSpeiCompanyDetails","companyId","updateViaboSpeiCompany","useChangeSpeiCompanyStatus","options","client","useQueryClient","changeStatus","useMutation","formData","onSuccess","onError","mutationOptions","toast","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useFindSpeiCompanies","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage"],"sources":["../../../../../frontend/src/app/business/viabo-spei/companies/store/spei-companies-store.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-admin-company-users-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-keys.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-list-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-company-details-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/services/SpeiCompaniesRepository.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useChangeSpeiCompanyStatus.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCompanies.js"],"sourcesContent":["import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  company: null,\r\n  openNewCompany: false\r\n}\r\nconst speiCompaniesStore = (set, get) => ({\r\n  ...initialState,\r\n  setSpeiCompany: company => {\r\n    set(\r\n      state => ({\r\n        company\r\n      }),\r\n      false,\r\n      'SET_SPEI_COMPANY'\r\n    )\r\n  },\r\n  setOpenNewSpeiCompany: open => {\r\n    set(\r\n      state => ({\r\n        openNewCompany: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_SPEI_NEW_COMPANY'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useSpeiCompaniesStore = createStore(speiCompaniesStore)\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\n\nexport const SpeiAdminCompanyUsersAdapter = users => {\n  const usersAdapted = users?.map(user => ({\n    id: user?.id,\n    name: user?.name\n  }))\n\n  return convertCatalogToReactSelect(usersAdapted, 'id', 'name')\n}\n","export const SPEI_COMPANIES_KEYS = {\r\n  COMPANIES_LIST: 'spei-companies-list',\r\n  USERS_ADMIN_COMPANY_LIST: 'spei-admin-company-users-list',\r\n  COMPANY_DETAILS: 'spei-company-details'\r\n}\r\n\r\nexport const METHODS_NEW_COMPANY_USERS = {\r\n  ADMIN_USERS: 'users',\r\n  NEW_ADMIN_USER: 'new-user'\r\n}\r\n","import { fCurrency } from '@/shared/utils'\r\n\r\nexport const SpeiCompaniesListAdapter = companies => {\r\n  const companiesAdapted =\r\n    companies?.map(company => ({\r\n      id: company?.id,\r\n      folio: company?.folio,\r\n      name: company?.tradeName,\r\n      balance: fCurrency(company?.balance || '0'),\r\n      status: company?.active === '1',\r\n      rfc: company?.rfc,\r\n      stpAccount: {\r\n        complete: company?.bankAccount,\r\n        hidden: company?.bankAccount?.replace(/.(?=.{8})/g, '*')\r\n      }\r\n    })) || []\r\n\r\n  return companiesAdapted\r\n}\r\n","export const SpeiCompanyDetailsAdapter = company => {\n  const companyAdapted = {\n    id: company?.id,\n    commercialName: company?.tradeName,\n    fiscalName: company?.fiscalName,\n    rfc: company?.rfc,\n    adminUsers: company?.users?.map(user => user?.id) || [],\n    costCenters: company?.costCenters?.map(costCenter => costCenter?.id) || []\n  }\n\n  return companyAdapted\n}\n","import { SpeiAdminCompanyUsersAdapter, SpeiCompaniesListAdapter, SpeiCompanyDetailsAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getSpeiCompaniesList = async () => {\r\n  const { data } = await axios.get('/api/commerces')\r\n  return SpeiCompaniesListAdapter(data)\r\n}\r\n\r\nexport const newSpeiCompany = async company => {\r\n  const { data } = await axios.post('/api/backoffice/company/new', company)\r\n  return data\r\n}\r\n\r\nexport const getViaboSpeiAdminCompanyUsers = async () => {\r\n  const { data } = await axios.get('/api/security/users/administrators-of-companies')\r\n\r\n  return SpeiAdminCompanyUsersAdapter(data)\r\n}\r\n\r\nexport const changeSpeiCompanyStatus = async company => {\r\n  const fetchURL = new URL('/api/backoffice/company/toggle', window.location.origin)\r\n\r\n  fetchURL.searchParams.set('company', company?.id)\r\n  fetchURL.searchParams.set('active', company?.changeStatus)\r\n\r\n  const { data } = await axios.put(fetchURL)\r\n\r\n  return company\r\n}\r\n\r\nexport const getViaboSpeiCompanyDetails = async companyId => {\r\n  const { data } = await axios.get(`/api/backoffice/company/${companyId}`)\r\n\r\n  return SpeiCompanyDetailsAdapter(data)\r\n}\r\n\r\nexport const updateViaboSpeiCompany = async company => {\r\n  const { data } = await axios.put('/api/backoffice/company/update', company)\r\n\r\n  return company\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { changeSpeiCompanyStatus } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useChangeSpeiCompanyStatus = (options = {}) => {\n  const client = useQueryClient()\n  const changeStatus = useMutation({\n    mutationFn: changeSpeiCompanyStatus,\n    ...options\n  })\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, ...mutationOptions } = options\n\n    try {\n      await toast.promise(changeStatus.mutateAsync(formData, mutationOptions), {\n        pending: 'Actualizando estado de la empresa...',\n        success: {\n          render({ data }) {\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANIES_LIST])\n            isFunction(onSuccess) && onSuccess(data)\n            return 'Se actualizó el estado de la empresa con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...changeStatus,\n    mutate\n  }\n}\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { getSpeiCompaniesList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCompanies = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COMPANIES_KEYS.COMPANIES_LIST],\r\n    queryFn: getSpeiCompaniesList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de empresas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/ViaboSpeiCompanies-rdNb1LfD.js"}