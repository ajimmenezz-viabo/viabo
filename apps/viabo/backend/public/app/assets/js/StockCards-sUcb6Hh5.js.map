{"version":3,"mappings":"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","names":["usePagination","data","itemsPerPage","currentPage","setCurrentPage","useState","maxPage","currentData","begin","end","next","prev","jump","page","pageNumber","CardTypesAdapter","cardTypes","dataAdapted","cardType","_a","convertCatalogToReactSelect","SHARED_CARD_KEYS","getCardTypes","axios","MANAGEMENT_STOCK_CARDS_KEYS","CreateCardAdapter","card","cardNumber","expiration","cvv","assigned","expirationYear","expirationFormatted","cardAdapter","getCryptInfo","AffiliatedCommercesAdapter","commerces","commerce","createNewStockCard","getAffiliatedCommerces","getStockCards","CardsAdapter","assignCards","cards","url","useCreateNewStockCard","options","client","useQueryClient","registerMutation","useMutation","formData","onSuccess","onError","mutationOptions","toast","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useFindAffiliatedCommerces","enqueueSnackbar","useSnackbar","customError","setCustomError","useQuery","errorMessage","useFindStockCards","useFindCardTypes"],"sources":["../../../../../frontend/src/shared/hooks/usePagination.js","../../../../../frontend/src/app/shared/adapters/cardTypesAdapter.js","../../../../../frontend/src/app/shared/adapters/sharedCardKeys.js","../../../../../frontend/src/app/shared/services/CardsSharedRepository.js","../../../../../frontend/src/app/management/stock-cards/adapters/managementStockCardsKeys.js","../../../../../frontend/src/app/management/stock-cards/adapters/createCardAdapter.js","../../../../../frontend/src/app/management/stock-cards/adapters/affiliatedCommercesAdapter.js","../../../../../frontend/src/app/management/stock-cards/services/StockCardRepository.js","../../../../../frontend/src/app/management/stock-cards/hooks/useCreateNewStockCard.js","../../../../../frontend/src/app/management/stock-cards/hooks/useFindAffiliatedCommerces.js","../../../../../frontend/src/app/management/stock-cards/hooks/useFindStockCards.js","../../../../../frontend/src/app/shared/hooks/useFindCardTypes.js"],"sourcesContent":["import { useState } from 'react'\r\n\r\nexport function usePagination(data, itemsPerPage) {\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const maxPage = Math.ceil(data.length / itemsPerPage)\r\n\r\n  function currentData() {\r\n    const begin = (currentPage - 1) * itemsPerPage\r\n    const end = begin + itemsPerPage\r\n    return data.slice(begin, end)\r\n  }\r\n\r\n  function next() {\r\n    setCurrentPage(currentPage => Math.min(currentPage + 1, maxPage))\r\n  }\r\n\r\n  function prev() {\r\n    setCurrentPage(currentPage => Math.max(currentPage - 1, 1))\r\n  }\r\n\r\n  function jump(page) {\r\n    const pageNumber = Math.max(1, page)\r\n    setCurrentPage(currentPage => Math.min(pageNumber, maxPage))\r\n  }\r\n\r\n  return { next, prev, jump, currentData, currentPage, maxPage }\r\n}\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const CardTypesAdapter = cardTypes => {\r\n  const dataAdapted =\r\n    cardTypes.map(cardType => ({\r\n      id: cardType?.id,\r\n      name: cardType?.name?.toUpperCase(),\r\n      statusId: cardType?.active\r\n    })) || []\r\n\r\n  return convertCatalogToReactSelect(dataAdapted, 'id', 'name')\r\n}\r\n","export const SHARED_CARD_KEYS = {\r\n  CARD_TYPES_LIST: 'cardTypes'\r\n}\r\n","import { CardTypesAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getCardTypes = async () => {\r\n  const { data } = await axios.get('/api/payment-processors')\r\n  return CardTypesAdapter(data)\r\n}\r\n","export const MANAGEMENT_STOCK_CARDS_KEYS = {\r\n  STOCK_CARDS_LIST: 'stockCards',\r\n  AFFILIATED_COMMERCES_LIST: 'affiliatedCommerces'\r\n}\r\n","import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const CreateCardAdapter = card => {\r\n  const { cardNumber, cardType, expiration, cvv, assigned } = card\r\n\r\n  const expirationYear = expiration?.slice(-2)\r\n\r\n  const expirationFormatted = expiration?.slice(0, 3) + expirationYear\r\n\r\n  const cardAdapter = {\r\n    cardNumber: cardNumber.replace(/\\s+/g, ''),\r\n    paymentProcessorId: cardType?.value,\r\n    expirationDate: expirationFormatted,\r\n    cvv,\r\n    commerceId: assigned?.value || ''\r\n  }\r\n  return getCryptInfo(cardAdapter)\r\n}\r\n","import { convertCatalogToReactSelect } from '@/shared/utils'\r\n\r\nexport const AffiliatedCommercesAdapter = commerces => {\r\n  const dataAdapted =\r\n    commerces?.map(commerce => ({\r\n      id: commerce?.id,\r\n      name: commerce?.name\r\n    })) || []\r\n  return convertCatalogToReactSelect(dataAdapted, 'id', 'name')\r\n}\r\n","import { AffiliatedCommercesAdapter } from '@/app/management/stock-cards/adapters'\r\nimport { CardsAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const createNewStockCard = async card => {\r\n  const { data } = await axios.post('/api/card/new', card)\r\n  return card\r\n}\r\n\r\nexport const getAffiliatedCommerces = async () => {\r\n  const { data } = await axios.get(`/api/commerces/affiliates`)\r\n  return AffiliatedCommercesAdapter(data)\r\n}\r\n\r\nexport const getStockCards = async () => {\r\n  const { data } = await axios.get('/api/cards/stock')\r\n  return CardsAdapter(data)\r\n}\r\n\r\nexport const assignCards = async cards => {\r\n  const url = cards?.cardId ? '/api/card/assign/commerce' : '/api/cards/assign/commerce'\r\n  const { data } = await axios.post(url, cards)\r\n  return data\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { MANAGEMENT_STOCK_CARDS_KEYS } from '@/app/management/stock-cards/adapters'\r\nimport { createNewStockCard } from '@/app/management/stock-cards/services'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useCreateNewStockCard = (options = {}) => {\r\n  const client = useQueryClient()\r\n\r\n  const registerMutation = useMutation(createNewStockCard, options)\r\n\r\n  const registerCard = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(registerMutation.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Registrando tarjeta ...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([MANAGEMENT_STOCK_CARDS_KEYS.STOCK_CARDS_LIST])\r\n            onSuccess(data)\r\n            return data?.isAssigned ? 'Se agrego una nueva tarjeta al comercio' : 'Se agrego una nueva tarjeta al stock'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(error, 'No se puede agregar la tarjeta al stock')\r\n      onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...registerMutation,\r\n    registerCard\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { MANAGEMENT_STOCK_CARDS_KEYS } from '@/app/management/stock-cards/adapters'\r\nimport { getAffiliatedCommerces } from '@/app/management/stock-cards/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindAffiliatedCommerces = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery([MANAGEMENT_STOCK_CARDS_KEYS.AFFILIATED_COMMERCES_LIST], getAffiliatedCommerces, {\r\n    staleTime: 60 * 5000,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede obtener la lista de comercios afiliados')\r\n      setCustomError(errorMessage)\r\n      enqueueSnackbar(errorMessage, {\r\n        variant: 'error',\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { MANAGEMENT_STOCK_CARDS_KEYS } from '@/app/management/stock-cards/adapters'\r\nimport { getStockCards } from '@/app/management/stock-cards/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindStockCards = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery([MANAGEMENT_STOCK_CARDS_KEYS.STOCK_CARDS_LIST], getStockCards, {\r\n    staleTime: 60000,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(\r\n        error,\r\n        'No se puede obtener la lista de tarjetas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { SHARED_CARD_KEYS } from '@/app/shared/adapters'\r\nimport { getCardTypes } from '@/app/shared/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCardTypes = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery([SHARED_CARD_KEYS.CARD_TYPES_LIST], getCardTypes, {\r\n    staleTime: 60 * 5000,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede obtener la lista de los tipos de tarjeta')\r\n      setCustomError(errorMessage)\r\n      enqueueSnackbar(errorMessage, {\r\n        variant: 'error',\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/StockCards-sUcb6Hh5.js"}