{"version":3,"mappings":"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","names":["useFindCardDetails","cardId","options","customError","setCustomError","useState","useQuery","CARDS_COMMERCES_KEYS","signal","getCardInfo","error","errorMessage","getErrorAPI","useFindCardMovements","startDate","endDate","initialDate","format","startOfDay","finalDate","endOfDay","addInfoCard","useCommerceDetailsCard","state","getCardMovements","toast","getNotificationTypeByErrorCode","es","useFindCommerceCardTypes","setCardTypeSelected","cardTypeSelected","getCommerceCardTypes","data","findSelected","cardType","useFindCommerceCards","cardTypeId","getEnabledCommerceCards","useFindMainCard","setMainCard","getMainCardCommerce"],"sources":["../../../../../frontend/src/app/business/viabo-card/cards/hooks/useFindCardDetails.js","../../../../../frontend/src/app/business/viabo-card/cards/hooks/useFindCardMovements.js","../../../../../frontend/src/app/business/viabo-card/cards/hooks/useFindCommerceCardTypes.js","../../../../../frontend/src/app/business/viabo-card/cards/hooks/useFindCommerceCards.js","../../../../../frontend/src/app/business/viabo-card/cards/hooks/useFindMainCard.js"],"sourcesContent":["import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getCardInfo } from '@/app/business/viabo-card/cards/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCardDetails = (cardId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery([CARDS_COMMERCES_KEYS.CARD_INFO, cardId], ({ signal }) => getCardInfo(cardId, signal), {\r\n    staleTime: 60000,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(\r\n        error,\r\n        'No se puede obtener la informacion de la tarjeta. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n    },\r\n    refetchOnWindowFocus: false,\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getCardMovements } from '@/app/business/viabo-card/cards/services'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindCardMovements = (cardId, startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd')\r\n  const [customError, setCustomError] = useState(null)\r\n  const addInfoCard = useCommerceDetailsCard(state => state.addInfoCard)\r\n  const commerces = useQuery(\r\n    [CARDS_COMMERCES_KEYS.CARD_MOVEMENTS, cardId],\r\n    ({ signal }) => getCardMovements(cardId, initialDate, finalDate, signal),\r\n    {\r\n      staleTime: 60000,\r\n      retry: false,\r\n      refetchOnWindowFocus: false,\r\n      onError: error => {\r\n        const errorMessage = getErrorAPI(\r\n          error,\r\n          'No se puede obtener la lista de movimientos de la tarjeta. Intente nuevamente o reporte a sistemas'\r\n        )\r\n        setCustomError(errorMessage)\r\n        toast.error(errorMessage, {\r\n          type: getNotificationTypeByErrorCode(error)\r\n        })\r\n        addInfoCard({\r\n          monthBalance: null,\r\n          filterDate: {\r\n            startDate: startOfDay(startDate),\r\n            endDate: endOfDay(endDate),\r\n            text: `${format(startDate, 'dd MMMM yyyy', { locale: es })} - ${format(endDate, 'dd MMMM yyyy', {\r\n              locale: es\r\n            })}`\r\n          },\r\n          movements: [],\r\n          expenses: '$0.00',\r\n          income: '$0.00',\r\n          balanceMovements: '$0.00'\r\n        })\r\n      },\r\n      ...options\r\n    }\r\n  )\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getCommerceCardTypes } from '@/app/business/viabo-card/cards/services'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceCardTypes = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setCardTypeSelected = useCommerceDetailsCard(state => state.setCardTypeSelected)\r\n  const cardTypeSelected = useCommerceDetailsCard(state => state.cardTypeSelected)\r\n  const commerces = useQuery([CARDS_COMMERCES_KEYS.PAYMENT_PROCESSORS], getCommerceCardTypes, {\r\n    staleTime: 60000,\r\n    refetchOnMount: 'always',\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(\r\n        error,\r\n        'No se puede obtener la lista de los tipos de tarjetas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n    },\r\n    onSuccess: data => {\r\n      const findSelected =\r\n        data?.find(cardType => cardType?.id === '2') || (Array.isArray(data) && data?.length > 0 && data[0]) || null\r\n\r\n      if (findSelected && !cardTypeSelected) {\r\n        setCardTypeSelected(findSelected?.id)\r\n      }\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getEnabledCommerceCards } from '@/app/business/viabo-card/cards/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceCards = (cardTypeId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery(\r\n    [CARDS_COMMERCES_KEYS.CARDS_COMMERCE_LIST, cardTypeId],\r\n    () => getEnabledCommerceCards(cardTypeId),\r\n    {\r\n      staleTime: 60000,\r\n      refetchOnMount: 'always',\r\n      onError: error => {\r\n        const errorMessage = getErrorAPI(\r\n          error,\r\n          'No se puede obtener la lista de tarjetas. Intente nuevamente o reporte a sistemas'\r\n        )\r\n        setCustomError(errorMessage)\r\n      },\r\n      ...options\r\n    }\r\n  )\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getMainCardCommerce } from '@/app/business/viabo-card/cards/services'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindMainCard = (cardTypeId, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setMainCard = useCommerceDetailsCard(state => state.setMainCard)\r\n  const commerces = useQuery(\r\n    [CARDS_COMMERCES_KEYS.MAIN_CARD],\r\n    ({ signal }) => getMainCardCommerce(cardTypeId, signal),\r\n    {\r\n      staleTime: 60000,\r\n      refetchOnWindowFocus: false,\r\n      onError: error => {\r\n        const errorMessage = getErrorAPI(error, 'No se puede obtener la informacion de la tarjeta principal')\r\n        setCustomError(errorMessage)\r\n        setMainCard(null)\r\n        toast.error(errorMessage, {\r\n          type: getNotificationTypeByErrorCode(error)\r\n        })\r\n      },\r\n      onSuccess: data => {\r\n        setMainCard(data)\r\n      },\r\n      ...options\r\n    }\r\n  )\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/CommerceCards-VyN9GeEl.js"}