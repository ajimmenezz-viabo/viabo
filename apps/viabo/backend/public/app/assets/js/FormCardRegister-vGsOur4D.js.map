{"version":3,"file":"FormCardRegister-vGsOur4D.js","sources":["../../../../../frontend/src/app/business/viabo-card/register-cards/adapters/assignCardDemoUserAdapter.js","../../../../../frontend/src/app/business/viabo-card/register-cards/hooks/useAssignCardToDemoUser.js"],"sourcesContent":["import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const AssignCardDemoUserAdapter = card => {\r\n  const expirationYear = card?.expiration?.slice(-2)\r\n\r\n  const expirationFormatted = card?.expiration?.slice(0, 3) + expirationYear\r\n\r\n  const cardAdapter = {\r\n    expiration: expirationFormatted,\r\n    cvv: card?.cvv\r\n  }\r\n\r\n  return getCryptInfo(cardAdapter)\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { assignCardToDemoUser } from '@/app/business/viabo-card/register-cards/services'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useAssignCardToDemoUser = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const register = useMutation(assignCardToDemoUser, {\r\n    onSuccess: () => {\r\n      setCustomError(null)\r\n    },\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede asignar la tarjeta. Intente nuevamente o reporte a sistemas')\r\n      setCustomError(errorMessage)\r\n      enqueueSnackbar(errorMessage, {\r\n        variant: getNotificationTypeByErrorCode(error),\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n\r\n  return {\r\n    ...register,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"names":["AssignCardDemoUserAdapter","card","expirationYear","_a","cardAdapter","_b","getCryptInfo","useAssignCardToDemoUser","options","enqueueSnackbar","useSnackbar","customError","setCustomError","useState","useMutation","assignCardToDemoUser","error","errorMessage","getErrorAPI","getNotificationTypeByErrorCode"],"mappings":"0rBAEO,MAAMA,EAA4BC,GAAQ,SAC/C,MAAMC,GAAiBC,EAAAF,GAAA,YAAAA,EAAM,aAAN,YAAAE,EAAkB,MAAM,IAIzCC,EAAc,CAClB,aAH0BC,EAAAJ,GAAA,YAAAA,EAAM,aAAN,YAAAI,EAAkB,MAAM,EAAG,IAAKH,EAI1D,IAAKD,GAAA,YAAAA,EAAM,GACZ,EAED,OAAOK,EAAaF,CAAW,CACjC,ECLaG,EAA0B,CAACC,EAAU,KAAO,CACvD,KAAM,CAAE,gBAAAC,CAAiB,EAAGC,EAAa,EACnC,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAS,IAAI,EAiBnD,MAAO,CACL,GAhBeC,EAAYC,EAAsB,CACjD,UAAW,IAAM,CACfH,EAAe,IAAI,CACpB,EACD,QAASI,GAAS,CAChB,MAAMC,EAAeC,EAAYF,EAAO,yEAAyE,EACjHJ,EAAeK,CAAY,EAC3BR,EAAgBQ,EAAc,CAC5B,QAASE,EAA+BH,CAAK,EAC7C,iBAAkB,GAC1B,CAAO,CACF,EACD,GAAGR,CACP,CAAG,EAIC,MAAOG,GAAe,IACvB,CACH"}