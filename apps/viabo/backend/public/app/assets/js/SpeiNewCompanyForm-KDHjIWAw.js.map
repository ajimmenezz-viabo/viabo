{"version":3,"file":"SpeiNewCompanyForm-KDHjIWAw.js","sources":["../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-new-company-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useCreateNewSpeiCompany.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useUpdateSpeiCompany.js"],"sourcesContent":["import { METHODS_NEW_COMPANY_USERS } from './spei-companies-keys'\n\nexport const SpeiNewCompanyAdapter = company => ({\n  fiscalName: company?.fiscalName?.trim(),\n  rfc: company?.rfc?.trim(),\n  commercialName: company?.commercialName?.trim(),\n  isNewUser: company?.method === METHODS_NEW_COMPANY_USERS.NEW_ADMIN_USER,\n  assignedUsers: company?.adminUsers?.map(user => user.value) || [],\n  userName: company?.adminName?.trim(),\n  userLastName: company?.adminLastName?.trim(),\n  userEmail: company?.adminEmail?.trim(),\n  userPhone: company?.adminPhone?.trim(),\n  costCenters: company?.costCenters?.map(user => user.value) || [],\n  hasViaboCard: company?.hasViaboCard\n})\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { newSpeiCompany } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useCreateNewSpeiCompany = (options = {}) => {\n  const client = useQueryClient()\n  const company = useMutation(newSpeiCompany, options)\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, mutationOptions } = options\n\n    try {\n      await toast.promise(company.mutateAsync(formData, mutationOptions), {\n        pending: 'Creando empresa...',\n        success: {\n          render({ data }) {\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANIES_LIST])\n            isFunction(onSuccess) && onSuccess(data)\n\n            return 'Se creó la empresa con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...company,\n    mutate\n  }\n}\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { updateViaboSpeiCompany } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useUpdateSpeiCompany = (options = {}) => {\n  const client = useQueryClient()\n  const company = useMutation(updateViaboSpeiCompany, options)\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, mutationOptions } = options\n\n    try {\n      await toast.promise(company.mutateAsync(formData, mutationOptions), {\n        pending: 'Actualizando empresa...',\n        success: {\n          render({ data }) {\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANIES_LIST])\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANY_DETAILS, data?.id])\n            isFunction(onSuccess) && onSuccess(data)\n\n            return 'Se actualizó la empresa con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...company,\n    mutate\n  }\n}\n"],"names":["SpeiNewCompanyAdapter","company","_a","_b","_c","METHODS_NEW_COMPANY_USERS","_d","user","_e","_f","_g","_h","_i","useCreateNewSpeiCompany","options","client","useQueryClient","useMutation","newSpeiCompany","formData","onSuccess","onError","mutationOptions","toast","data","SPEI_COMPANIES_KEYS","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useUpdateSpeiCompany","updateViaboSpeiCompany"],"mappings":"w1BAEO,MAAMA,GAAwBC,GAAY,uBAAA,OAC/C,YAAYC,EAAAD,GAAA,YAAAA,EAAS,aAAT,YAAAC,EAAqB,OACjC,KAAKC,EAAAF,GAAA,YAAAA,EAAS,MAAT,YAAAE,EAAc,OACnB,gBAAgBC,EAAAH,GAAA,YAAAA,EAAS,iBAAT,YAAAG,EAAyB,OACzC,WAAWH,GAAA,YAAAA,EAAS,UAAWI,EAA0B,eACzD,gBAAeC,EAAAL,GAAA,YAAAA,EAAS,aAAT,YAAAK,EAAqB,IAAIC,GAAQA,EAAK,SAAU,CAAE,EACjE,UAAUC,EAAAP,GAAA,YAAAA,EAAS,YAAT,YAAAO,EAAoB,OAC9B,cAAcC,EAAAR,GAAA,YAAAA,EAAS,gBAAT,YAAAQ,EAAwB,OACtC,WAAWC,EAAAT,GAAA,YAAAA,EAAS,aAAT,YAAAS,EAAqB,OAChC,WAAWC,EAAAV,GAAA,YAAAA,EAAS,aAAT,YAAAU,EAAqB,OAChC,cAAaC,EAAAX,GAAA,YAAAA,EAAS,cAAT,YAAAW,EAAsB,IAAIL,GAAQA,EAAK,SAAU,CAAE,EAChE,aAAcN,GAAA,YAAAA,EAAS,YACzB,GCLaY,GAA0B,CAACC,EAAU,KAAO,CACvD,MAAMC,EAASC,EAAgB,EACzBf,EAAUgB,EAAYC,EAAgBJ,CAAO,EA4BnD,MAAO,CACL,GAAGb,EACH,OA7Ba,MAAOkB,EAAUL,IAAY,CAC1C,KAAM,CAAE,UAAAM,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGR,EAEhD,GAAI,CACF,MAAMS,EAAM,QAAQtB,EAAQ,YAAYkB,EAAUG,CAAe,EAAG,CAClE,QAAS,qBACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CACf,OAAAT,EAAO,kBAAkB,CAACU,EAAoB,cAAc,CAAC,EAC7DC,EAAWN,CAAS,GAAKA,EAAUI,CAAI,EAEhC,8BACR,CACF,CACT,CAAO,CACF,OAAQG,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWL,CAAO,GAAKA,EAAQO,CAAc,EAC7CL,EAAM,MAAMK,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH,EClCaI,GAAuB,CAACjB,EAAU,KAAO,CACpD,MAAMC,EAASC,EAAgB,EACzBf,EAAUgB,EAAYe,EAAwBlB,CAAO,EA6B3D,MAAO,CACL,GAAGb,EACH,OA9Ba,MAAOkB,EAAUL,IAAY,CAC1C,KAAM,CAAE,UAAAM,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGR,EAEhD,GAAI,CACF,MAAMS,EAAM,QAAQtB,EAAQ,YAAYkB,EAAUG,CAAe,EAAG,CAClE,QAAS,0BACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CACf,OAAAT,EAAO,kBAAkB,CAACU,EAAoB,cAAc,CAAC,EAC7DV,EAAO,kBAAkB,CAACU,EAAoB,gBAAiBD,GAAA,YAAAA,EAAM,EAAE,CAAC,EACxEE,EAAWN,CAAS,GAAKA,EAAUI,CAAI,EAEhC,mCACR,CACF,CACT,CAAO,CACF,OAAQG,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWL,CAAO,GAAKA,EAAQO,CAAc,EAC7CL,EAAM,MAAMK,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH"}