{"version":3,"mappings":"s4BAAO,MAAMA,GAAwB,CACnC,UAAW,kCACb,ECCaC,GAAoC,MAAOC,EAAWC,EAASC,IAAW,CACrF,MAAMC,EAAW,IAAI,IAAI,gCAAiC,OAAO,SAAS,MAAM,EAE1EC,EAAU,CACd,CAAE,MAAO,OAAQ,SAAU,KAAM,MAAOJ,CAAW,EACnD,CAAE,MAAO,OAAQ,SAAU,KAAM,MAAOC,CAAS,EACjD,CAAE,MAAO,gBAAiB,SAAU,IAAK,MAAO,cAAgB,CACjE,EAEDG,GAAA,MAAAA,EAAS,QAAQ,CAACC,EAAQC,IAAU,CAClC,OAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CAC/CL,EAAS,aAAa,IAAI,WAAWG,CAAK,KAAKC,CAAG,IAAKC,CAAK,CAClE,CAAK,CACL,GACE,KAAM,CAAE,KAAAC,CAAI,EAAK,MAAMC,EAAM,IAAIP,EAAS,KAAM,CAC9C,OAAAD,CACJ,CAAG,EACD,OAAOS,GAAqBF,CAAI,CAClC,ECVaG,GAA4C,CAACZ,EAAWC,EAASY,EAAU,KAAO,CAC7F,GAAI,CAACb,GAAa,CAACC,EACjB,OAAO,KAET,MAAMa,EAAcC,EAAOC,EAAWhB,CAAS,EAAG,qBAAqB,EACjEiB,EAAYF,EAAOG,EAASjB,CAAO,EAAG,qBAAqB,EAC3D,CAACkB,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACzB,GAAsB,SAAS,EAC1C,QAAS,CAAC,CAAE,OAAAI,CAAQ,IAAKH,GAAkCe,EAAaG,EAAWf,CAAM,EACzF,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGW,CACP,CAAG,EAEDW,mBAAU,IAAM,CACd,GAAIF,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMG,EAAeC,EACnBJ,EAAM,MACN,sFACD,EACDF,EAAeK,CAAY,EAC3BE,EAAM,MAAMF,EAAc,CACxB,KAAMG,EAA+BN,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH","names":["EXPENSES_CONTROL_KEYS","getExpensesMovementsCommerceCards","startDate","endDate","signal","fetchURL","filters","filter","index","key","value","data","axios","CardMovementsAdapter","useFindExpensesMovementsFromCommerceCards","options","initialDate","format","startOfDay","finalDate","endOfDay","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode"],"sources":["../../../../../frontend/src/app/business/expenses-control/adapters/expenses-control-keys.js","../../../../../frontend/src/app/business/expenses-control/services/ExpensesControlRepository.js","../../../../../frontend/src/app/business/expenses-control/hooks/useFindExpensesMovementsFromCommerceCards.js"],"sourcesContent":["export const EXPENSES_CONTROL_KEYS = {\r\n  MOVEMENTS: 'expenses-card-movements-commerce'\r\n}\r\n","import { CardMovementsAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getExpensesMovementsCommerceCards = async (startDate, endDate, signal) => {\r\n  const fetchURL = new URL('/api/cards/movements/commerce', window.location.origin)\r\n\r\n  const filters = [\r\n    { field: 'date', operator: '>=', value: startDate },\r\n    { field: 'date', operator: '<=', value: endDate },\r\n    { field: 'operationType', operator: '=', value: 'OTROS CARGOS' }\r\n  ]\r\n\r\n  filters?.forEach((filter, index) => {\r\n    Object.entries(filter).forEach(([key, value]) => {\r\n      fetchURL.searchParams.set(`filters[${index}][${key}]`, value)\r\n    })\r\n  })\r\n  const { data } = await axios.get(fetchURL.href, {\r\n    signal\r\n  })\r\n  return CardMovementsAdapter(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { EXPENSES_CONTROL_KEYS } from '../adapters'\r\nimport { getExpensesMovementsCommerceCards } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindExpensesMovementsFromCommerceCards = (startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd HH:mm:ss')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd HH:mm:ss')\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [EXPENSES_CONTROL_KEYS.MOVEMENTS],\r\n    queryFn: ({ signal }) => getExpensesMovementsCommerceCards(initialDate, finalDate, signal),\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de movimientos. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/ExpensesControl-y5tRJlvO.js"}