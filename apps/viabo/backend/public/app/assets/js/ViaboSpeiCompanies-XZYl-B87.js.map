{"version":3,"mappings":"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","names":["SpeiAdminCompanyUsersAdapter","users","decryptedUsers","getDecryptInfo","usersAdapted","user","convertCatalogToReactSelect","SPEI_COMPANIES_KEYS","METHODS_NEW_COMPANY_USERS","SpeiCompaniesListAdapter","companies","company","fCurrency","SpeiAdminCompanyUsersMock","getCryptInfo","_","index","_mock","faker","SpeiAdminCompaniesMock","getSpeiCompaniesList","newSpeiCompany","data","axios","getViaboSpeiAdminCompanyUsers","changeSpeiCompanyStatus","useChangeSpeiCompanyStatus","options","client","useQueryClient","changeStatus","useMutation","formData","onSuccess","onError","mutationOptions","toast","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useFindSpeiCompanies","customError","setCustomError","useState","query","useQuery","useEffect","errorMessage","initialState","speiCompaniesStore","set","get","state","open","useSpeiCompaniesStore","createStore"],"sources":["../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-admin-company-users-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-keys.js","../../../../../frontend/src/app/business/viabo-spei/companies/adapters/spei-companies-list-adapter.js","../../../../../frontend/src/app/business/viabo-spei/companies/_mock/spe-admin-company-users-mock.js","../../../../../frontend/src/app/business/viabo-spei/companies/_mock/spei-companies-mock.js","../../../../../frontend/src/app/business/viabo-spei/companies/services/SpeiCompaniesRepository.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useChangeSpeiCompanyStatus.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCompanies.js","../../../../../frontend/src/app/business/viabo-spei/companies/store/spei-companies-store.js"],"sourcesContent":["import { convertCatalogToReactSelect, getDecryptInfo } from '@/shared/utils'\n\nexport const SpeiAdminCompanyUsersAdapter = users => {\n  const decryptedUsers = getDecryptInfo(users?.ciphertext, users?.iv)\n\n  if (!decryptedUsers) {\n    throw new Error('No se pueden obtener los usuarios administradores de empresas')\n  }\n\n  const usersAdapted = decryptedUsers?.map(user => ({\n    id: user?.id,\n    name: user?.name,\n    status: !!user?.status\n  }))\n\n  return convertCatalogToReactSelect(usersAdapted, 'id', 'name', 'status')\n}\n","export const SPEI_COMPANIES_KEYS = {\r\n  COMPANIES_LIST: 'spei-companies-list',\r\n  USERS_ADMIN_COMPANY_LIST: 'spei-admin-company-users-list'\r\n}\r\n\r\nexport const METHODS_NEW_COMPANY_USERS = {\r\n  ADMIN_USERS: 'users',\r\n  NEW_ADMIN_USER: 'new-user'\r\n}\r\n","import { fCurrency } from '@/shared/utils'\r\n\r\nexport const SpeiCompaniesListAdapter = companies => {\r\n  const companiesAdapted =\r\n    companies?.map(company => ({\r\n      id: company?.id,\r\n      name: company?.name,\r\n      balance: fCurrency(company?.balance || '0'),\r\n      status: !!company?.active,\r\n      rfc: company?.rfc,\r\n      stpAccount: company?.stpAccount\r\n    })) || []\r\n\r\n  return companiesAdapted\r\n}\r\n","import { faker } from '@faker-js/faker'\n\nimport { _mock } from '@/app/shared/_mock'\nimport { getCryptInfo } from '@/shared/utils'\n\nexport const SpeiAdminCompanyUsersMock = getCryptInfo(\n  [...Array(5)].map((_, index) => ({\n    id: _mock.id(index),\n    name: faker.person.fullName(),\n    status: faker.datatype.boolean({ probability: 0.8 })\n  }))\n)\n","import { faker } from '@faker-js/faker'\n\nexport const SpeiAdminCompaniesMock = [...Array(5)].map((_, index) => ({\n  id: faker.string.numeric(6),\n  name: faker.company.name(),\n  active: faker.datatype.boolean({ probability: 0.8 }),\n  rfc: faker.string.alphanumeric(13),\n  balance: faker.string.numeric(5),\n  stpAccount: faker.string.numeric(18)\n}))\n","import { SpeiAdminCompaniesMock, SpeiAdminCompanyUsersMock } from '../_mock'\r\nimport { SpeiAdminCompanyUsersAdapter, SpeiCompaniesListAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getSpeiCompaniesList = async () => {\r\n  // const { data } = await axios.get('/api/spei/external-accounts')\r\n  const data = SpeiAdminCompaniesMock\r\n  return SpeiCompaniesListAdapter(data)\r\n}\r\n\r\nexport const newSpeiCompany = async company => {\r\n  const { data } = await axios.post('/api/spei/external-account/new', company)\r\n  return data\r\n}\r\n\r\nexport const getViaboSpeiAdminCompanyUsers = async () => {\r\n  // const { data } = await axios.get('/api/spei/users')\r\n\r\n  const data = SpeiAdminCompanyUsersMock\r\n\r\n  return SpeiAdminCompanyUsersAdapter(data)\r\n}\r\n\r\nexport const changeSpeiCompanyStatus = async company => {\r\n  const { data } = await axios.put(`/api/spei/company/${company?.id}/${company?.changeStatus ? 'disable' : 'enable'}`)\r\n  return company\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { changeSpeiCompanyStatus } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\nimport { isFunction } from '@/shared/utils'\n\nexport const useChangeSpeiCompanyStatus = (options = {}) => {\n  const client = useQueryClient()\n  const changeStatus = useMutation({\n    mutationFn: changeSpeiCompanyStatus,\n    ...options\n  })\n  const mutate = async (formData, options) => {\n    const { onSuccess, onError, ...mutationOptions } = options\n\n    try {\n      await toast.promise(changeStatus.mutateAsync(formData, mutationOptions), {\n        pending: 'Actualizando estado de la empresa...',\n        success: {\n          render({ data }) {\n            client.invalidateQueries([SPEI_COMPANIES_KEYS.COMPANIES_LIST])\n            isFunction(onSuccess) && onSuccess(data)\n            return 'Se actualizó el estado de la empresa con éxito'\n          }\n        }\n      })\n    } catch (error) {\n      const errorFormatted = getErrorAPI(\n        error,\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\n      )\n      isFunction(onError) && onError(errorFormatted)\n      toast.error(errorFormatted, {\n        type: getNotificationTypeByErrorCode(error)\n      })\n    }\n  }\n\n  return {\n    ...changeStatus,\n    mutate\n  }\n}\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\r\nimport { getSpeiCompaniesList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindSpeiCompanies = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [SPEI_COMPANIES_KEYS.COMPANIES_LIST],\r\n    queryFn: getSpeiCompaniesList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de empresas. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  company: null,\r\n  openNewCompany: false\r\n}\r\nconst speiCompaniesStore = (set, get) => ({\r\n  ...initialState,\r\n  setSpeiCompany: company => {\r\n    set(\r\n      state => ({\r\n        company\r\n      }),\r\n      false,\r\n      'SET_SPEI_NEW_COMPANY'\r\n    )\r\n  },\r\n  setOpenNewSpeiCompany: open => {\r\n    set(\r\n      state => ({\r\n        openNewCompany: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_SPEI_NEW_COMPANY'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useSpeiCompaniesStore = createStore(speiCompaniesStore)\r\n"],"file":"assets/js/ViaboSpeiCompanies-XZYl-B87.js"}