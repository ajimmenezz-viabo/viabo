{"version":3,"mappings":"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","names":["PAYMENT_PROCESSORS","GlobalCardsAdapter","cards","decryptedCards","getDecryptInfo","masterBalance","masterTransit","dataAdapted","card","_a","fCurrency","MasterMovementsAdapter","movements","decryptedMovements","expenses","income","expensesWithoutInvoice","expensesWithInvoice","expensesWithoutChecked","movement","amount","expensesControlFiles","invoiceFiles","result","file","isInvoice","date","format","es","time","IS_OTHERS_CHARGES_TYPE","_b","fDateTime","_c","getGlobalCards","data","axios","getMasterMovements","initialDate","finalDate","signal","fetchURL","getCommerceCardsByPaymentProcessors","paymentProcessors","resultsByPaymentProcessorId","requests","paymentProcessorId","response","CardsAdapter","useFindCommerceCardsByPaymentProcessors","options","customError","setCustomError","useState","query","useQuery","DASHBOARD_MASTER_KEYS","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","useFindGlobalCards","setMainCard","useCommerceDetailsCard","state","error","useFindMasterMovements","startDate","endDate","startOfDay","endOfDay","setMovements","setFilterDate","useMasterGlobalStore"],"sources":["../../../../../frontend/src/app/business/dashboard-master/adapters/globalCardsAdapter.js","../../../../../frontend/src/app/business/dashboard-master/adapters/masterMovementsAdapter.js","../../../../../frontend/src/app/business/dashboard-master/services/DashboardMasterRepository.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindCommerceCardsByPaymentProcessors.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindGlobalCards.js","../../../../../frontend/src/app/business/dashboard-master/hooks/useFindMasterMovements.js"],"sourcesContent":["import { fCurrency, getDecryptInfo } from '@/shared/utils'\r\n\r\nconst PAYMENT_PROCESSORS = {\r\n  'MASTER CARD': '1',\r\n  MASTERCARD: '1',\r\n  CARNET: '2'\r\n}\r\n\r\nexport const GlobalCardsAdapter = cards => {\r\n  const decryptedCards = getDecryptInfo(cards?.ciphertext, cards?.iv)\r\n  let masterBalance = 0\r\n  let masterTransit = 0\r\n  const dataAdapted = decryptedCards?.map(card => {\r\n    masterBalance += parseFloat(card?.balance)\r\n    masterTransit += parseFloat(card?.inTransit)\r\n    return {\r\n      ...card,\r\n      paymentProcessorId: PAYMENT_PROCESSORS[card?.paymentProcessor?.toUpperCase()] ?? null,\r\n      id: card?.cardId,\r\n      SPEI: card?.spei,\r\n      balanceFormatted: fCurrency(card?.balance),\r\n      inTransitFormatted: fCurrency(card?.inTransit),\r\n      cardNumber: card?.cardNumber || '',\r\n      cardON: !(card?.block === 'Blocked')\r\n    }\r\n  })\r\n\r\n  return {\r\n    master: {\r\n      balance: masterBalance,\r\n      inTransit: masterTransit,\r\n      balanceFormatted: fCurrency(masterBalance),\r\n      inTransitFormatted: fCurrency(masterTransit)\r\n    },\r\n    globals: dataAdapted\r\n  }\r\n}\r\n","import { format } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\n\r\nimport { fCurrency, fDateTime, getDecryptInfo } from '@/shared/utils'\r\n\r\nexport const MasterMovementsAdapter = movements => {\r\n  const decryptedMovements = getDecryptInfo(movements?.ciphertext, movements?.iv)\r\n\r\n  let expenses = 0\r\n  let income = 0\r\n  let expensesWithoutInvoice = 0\r\n  let expensesWithInvoice = 0\r\n  let expensesWithoutChecked = 0\r\n\r\n  return {\r\n    movements:\r\n      decryptedMovements?.map(movement => {\r\n        const amount = parseFloat(movement?.amount || '0')\r\n        if (movement?.type.toLowerCase() === 'gasto') {\r\n          expenses += amount\r\n        }\r\n        if (movement?.type.toLowerCase() === 'ingreso') {\r\n          income += amount\r\n        }\r\n\r\n        const expensesControlFiles = movement?.receiptFiles ? movement?.receiptFiles?.split(',') : []\r\n        const invoiceFiles = expensesControlFiles?.reduce(\r\n          (result, file) => {\r\n            if (file.endsWith('.xml')) {\r\n              result.xml = file\r\n            } else if (file.endsWith('.pdf')) {\r\n              result.pdf = file\r\n            }\r\n            return result\r\n          },\r\n          {\r\n            xml: null,\r\n            pdf: null\r\n          }\r\n        )\r\n        const isInvoice = Boolean(invoiceFiles?.xml !== null && invoiceFiles?.pdf !== null)\r\n\r\n        const date = movement?.date ? format(new Date(movement?.date), 'dd MMM yyyy', { locale: es }) : ''\r\n        const time = movement?.date ? format(new Date(movement?.date), 'p') : ''\r\n\r\n        const IS_OTHERS_CHARGES_TYPE = Boolean(movement?.operationType?.toLowerCase() === 'otros cargos')\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.checked) && isInvoice) {\r\n          expensesWithInvoice += amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && Boolean(movement?.checked) && !isInvoice) {\r\n          expensesWithoutInvoice += amount\r\n        }\r\n\r\n        if (IS_OTHERS_CHARGES_TYPE && !movement?.checked) {\r\n          expensesWithoutChecked += amount\r\n        }\r\n\r\n        return {\r\n          id: movement?.transactionId,\r\n          fullDate: fDateTime(movement?.date),\r\n          date,\r\n          time,\r\n          serverDate: movement?.date,\r\n          description: movement?.description,\r\n          amount,\r\n          amountFormat: fCurrency(amount),\r\n          paymentProcessor: movement?.cardPaymentProcessor,\r\n          type: movement?.type.toLowerCase(),\r\n          operationType: movement?.operationType?.toUpperCase(),\r\n          concept: movement?.concept ?? '',\r\n          cardId: movement?.cardId,\r\n          commerceId: movement?.cardCommerceId,\r\n          verified: Boolean(movement?.checked),\r\n          isMainCard: Boolean(movement?.cardMain),\r\n          expensesControl: {\r\n            id: movement?.receiptId,\r\n            isInvoice,\r\n            invoiceFiles,\r\n            otherFiles: !isInvoice ? expensesControlFiles : []\r\n          },\r\n          original: movement\r\n        }\r\n      }) ?? [],\r\n    income: fCurrency(income),\r\n    expenses: fCurrency(expenses),\r\n    balanceMovements: fCurrency(income - expenses),\r\n    expensesWithInvoice: fCurrency(expensesWithInvoice),\r\n    expensesWithoutInvoice: fCurrency(expensesWithoutInvoice),\r\n    expensesWithoutChecked: fCurrency(expensesWithoutChecked),\r\n    totalExpensesOtherCharges: fCurrency(expensesWithInvoice + expensesWithoutInvoice + expensesWithoutChecked)\r\n  }\r\n}\r\n","import { GlobalCardsAdapter, MasterMovementsAdapter } from '@/app/business/dashboard-master/adapters'\r\nimport { CardsAdapter } from '@/app/shared/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getGlobalCards = async () => {\r\n  const { data } = await axios.get(`/api/main-cards/information`)\r\n  return GlobalCardsAdapter(data)\r\n}\r\n\r\nexport const getMasterMovements = async (initialDate, finalDate, signal) => {\r\n  const fetchURL = new URL('/api/master-cards/movements', window.location.origin)\r\n  fetchURL.searchParams.set('startDate', initialDate)\r\n  fetchURL.searchParams.set('endDate', finalDate)\r\n  const { data } = await axios.get(fetchURL.href)\r\n  return MasterMovementsAdapter(data)\r\n}\r\n\r\nexport const getCommerceCardsByPaymentProcessors = async paymentProcessors => {\r\n  const resultsByPaymentProcessorId = {}\r\n  const requests = paymentProcessors.map(paymentProcessorId =>\r\n    axios\r\n      .get(`/api/enabled-cards/commerce?paymentProcessorId=${paymentProcessorId}`)\r\n      .then(response => CardsAdapter(response.data))\r\n      .then(cards => {\r\n        // Almacena los resultados en el objeto resultsByPaymentProcessorId\r\n        resultsByPaymentProcessorId[paymentProcessorId] = cards\r\n      })\r\n  )\r\n  await Promise.all(requests)\r\n\r\n  return resultsByPaymentProcessorId\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '../adapters/dashboardMasterKeys'\r\nimport { getCommerceCardsByPaymentProcessors } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceCardsByPaymentProcessors = (paymentProcessors, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [DASHBOARD_MASTER_KEYS.COMMERCE_CARDS],\r\n    queryFn: ({ signal }) => getCommerceCardsByPaymentProcessors(paymentProcessors, signal),\r\n    staleTime: 60000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de tarjetas del comercio. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '@/app/business/dashboard-master/adapters/dashboardMasterKeys'\r\nimport { getGlobalCards } from '@/app/business/dashboard-master/services'\r\nimport { useCommerceDetailsCard } from '@/app/business/viabo-card/cards/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindGlobalCards = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setMainCard = useCommerceDetailsCard(state => state.setMainCard)\r\n  const commerces = useQuery([DASHBOARD_MASTER_KEYS.GLOBAL_CARDS], getGlobalCards, {\r\n    staleTime: 60000,\r\n    refetchOnWindowFocus: false,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede obtener la información de las tarjetas principales')\r\n      setCustomError(errorMessage)\r\n      setMainCard(null)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    },\r\n    onSuccess: data => {\r\n      setMainCard(data)\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { endOfDay, format, startOfDay } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { DASHBOARD_MASTER_KEYS } from '@/app/business/dashboard-master/adapters/dashboardMasterKeys'\r\nimport { getMasterMovements } from '@/app/business/dashboard-master/services'\r\nimport { useMasterGlobalStore } from '@/app/business/dashboard-master/store'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindMasterMovements = (startDate, endDate, options = {}) => {\r\n  if (!startDate || !endDate) {\r\n    return null\r\n  }\r\n  const initialDate = format(startOfDay(startDate), 'yyyy-MM-dd')\r\n  const finalDate = format(endOfDay(endDate), 'yyyy-MM-dd')\r\n  const [customError, setCustomError] = useState(null)\r\n  const { setMovements, setFilterDate } = useMasterGlobalStore(state => state)\r\n\r\n  const movements = useQuery(\r\n    [DASHBOARD_MASTER_KEYS.MOVEMENTS],\r\n    ({ signal }) => getMasterMovements(initialDate, finalDate, signal),\r\n    {\r\n      staleTime: 60000,\r\n      retry: false,\r\n      refetchOnWindowFocus: false,\r\n      onError: error => {\r\n        const errorMessage = getErrorAPI(\r\n          error,\r\n          'No se puede obtener la lista de movimientos. Intente nuevamente o reporte a sistemas'\r\n        )\r\n        setCustomError(errorMessage)\r\n        toast.error(errorMessage, {\r\n          type: getNotificationTypeByErrorCode(error)\r\n        })\r\n        setMovements(null)\r\n      },\r\n      onSuccess: data => {\r\n        setFilterDate({\r\n          startDate: startOfDay(startDate),\r\n          endDate: endOfDay(endDate),\r\n          text: `${format(startDate, 'dd MMMM yyyy', { locale: es })} - ${format(endDate, 'dd MMMM yyyy', {\r\n            locale: es\r\n          })}`\r\n        })\r\n      },\r\n      ...options\r\n    }\r\n  )\r\n  return {\r\n    ...movements,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/DashboardMaster-d9rF3yOT.js"}