{"version":3,"mappings":"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","names":["AssignedTicketsListAdapter","tickets","ticket","fDateTime","GeneratedTicketsListAdapter","TicketConversationAdapter","data","pageParam","total","page","limit","participants","_a","participant","index","name","initials","photo","messages","_b","message","getNameAvatar","fToNowStrict","getGeneratedTicketsSupportList","fetchURL","axios","getAssignedTicketsSupportList","getSupportTicketConversation","ticketId","addMessageToSupportTicketConversation","finishSupportTicket","TICKET_STATUS","getColorTicketStatusById","id","status","useFindAssignedTicketsSupport","options","customError","setCustomError","useState","query","useQuery","TICKETS_SUPPORT_LIST_KEYS","useEffect","errorMessage","getErrorAPI","toast","getNotificationTypeByErrorCode","useFindGeneratedTicketsSupport","initialState","ticketSupportListStore","set","get","state","open","isFullScreen","totalTicketsGenerated","totalTicketsAssigned","canClose","useTicketSupportListStore","createStore"],"sources":["../../../../../frontend/src/app/support/ticket-support-list/adapters/assigned-tickets-list-adapter.js","../../../../../frontend/src/app/support/ticket-support-list/adapters/generated-tickets-list-adapter.js","../../../../../frontend/src/app/support/ticket-support-list/adapters/ticket-conversation-adapter.js","../../../../../frontend/src/app/support/ticket-support-list/services/TicketsSupportListRepository.js","../../../../../frontend/src/app/support/ticket-support-list/services/getTicketStatus.js","../../../../../frontend/src/app/support/ticket-support-list/hooks/useFindAssignedTicketsSupport.js","../../../../../frontend/src/app/support/ticket-support-list/hooks/useFindGeneratedTicketsSupport.js","../../../../../frontend/src/app/support/ticket-support-list/store/ticket-support-list-store.js"],"sourcesContent":["import { fDateTime } from '@/shared/utils'\r\n\r\nexport const AssignedTicketsListAdapter = tickets =>\r\n  tickets?.map(ticket => ({\r\n    id: ticket?.id,\r\n    attendant: ticket?.assignedName,\r\n    requester: ticket?.applicantName,\r\n    description: ticket?.description,\r\n    cause: {\r\n      id: ticket?.supportReasonId,\r\n      name: ticket?.supportReasonName\r\n    },\r\n    date: {\r\n      original: ticket?.createDate,\r\n      dateTime: ticket?.createDate ? fDateTime(ticket?.createDate) : ''\r\n    },\r\n    status: {\r\n      id: ticket?.statusId,\r\n      name: ticket?.statusName\r\n    },\r\n    createdBy: {\r\n      id: ticket?.createdByUser\r\n    }\r\n  }))\r\n","import { fDateTime } from '@/shared/utils'\r\n\r\nexport const GeneratedTicketsListAdapter = tickets =>\r\n  tickets?.map(ticket => ({\r\n    id: ticket?.id,\r\n    attendant: ticket?.assignedName,\r\n    requester: ticket?.applicantName,\r\n    description: ticket?.description,\r\n    cause: {\r\n      id: ticket?.supportReasonId,\r\n      name: ticket?.supportReasonName\r\n    },\r\n    date: {\r\n      original: ticket?.createDate,\r\n      dateTime: ticket?.createDate ? fDateTime(ticket?.createDate) : ''\r\n    },\r\n    status: {\r\n      id: ticket?.statusId,\r\n      name: ticket?.statusName\r\n    },\r\n    createdBy: {\r\n      id: ticket?.createdByUser\r\n    }\r\n  }))\r\n","import { fToNowStrict } from '@/shared/utils'\r\nimport { getNameAvatar } from '@/theme/utils'\r\n\r\nexport const TicketConversationAdapter = (data, pageParam) => {\r\n  const { total, page, limit } = data\r\n\r\n  const participants =\r\n    data?.participants?.map((participant, index) => {\r\n      const { name, initials, photo } = participant\r\n      return {\r\n        id: index,\r\n        name,\r\n        initials,\r\n        avatar: photo && photo !== '' ? photo : '/'\r\n      }\r\n    }) || []\r\n\r\n  const messages =\r\n    data?.messages?.map((message, index) => ({\r\n      id: message?.id,\r\n      name: message?.userName,\r\n      initials: getNameAvatar(message?.userName || ''),\r\n      message: message?.description,\r\n      createDate: {\r\n        fToNow: message?.createDate ? fToNowStrict(message?.createDate) : '',\r\n        original: message?.createDate\r\n      },\r\n      my: !!message?.isUserSentMessage,\r\n      attachment: message?.files || [],\r\n      avatar: message?.photo && message?.photo !== '' ? message?.photo : '/',\r\n      isSent: true\r\n    })) || []\r\n\r\n  return {\r\n    results: {\r\n      participants,\r\n      messages\r\n    },\r\n    next: Number(total) > Number(page) * Number(limit) ? pageParam + 1 : undefined,\r\n    canCloseTicket: !!data?.userCanCloseTicket\r\n  }\r\n}\r\n","import { AssignedTicketsListAdapter, GeneratedTicketsListAdapter, TicketConversationAdapter } from '../adapters'\r\n\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getGeneratedTicketsSupportList = async () => {\r\n  const fetchURL = new URL('/api/tickets', window.location.origin)\r\n  fetchURL.searchParams.set('created', true)\r\n\r\n  const { data } = await axios.get(fetchURL)\r\n\r\n  return GeneratedTicketsListAdapter(data)\r\n}\r\n\r\nexport const getAssignedTicketsSupportList = async () => {\r\n  const fetchURL = new URL('/api/tickets', window.location.origin)\r\n  fetchURL.searchParams.set('assigned', true)\r\n\r\n  const { data } = await axios.get(fetchURL)\r\n\r\n  return AssignedTicketsListAdapter(data)\r\n}\r\n\r\nexport const getSupportTicketConversation = async (ticketId, page) => {\r\n  // const page = pageParam === 0 ? 1 : pageParam\r\n\r\n  const fetchURL = new URL('/api/tickets/messages', window.location.origin)\r\n  fetchURL.searchParams.set('ticket', ticketId)\r\n  fetchURL.searchParams.set('limit', 10)\r\n  fetchURL.searchParams.set('page', page)\r\n\r\n  const { data } = await axios.get(fetchURL)\r\n  return TicketConversationAdapter(data, page)\r\n}\r\n\r\nexport const addMessageToSupportTicketConversation = async message => {\r\n  const { data } = await axios.post('/api/tickets/message/new', message?.data)\r\n\r\n  return message?.ticketId\r\n}\r\n\r\nexport const finishSupportTicket = async ticket => {\r\n  const { data } = await axios.put(`/api/tickets/ticket/${ticket?.ticketId}/close`)\r\n\r\n  return data\r\n}\r\n","export const TICKET_STATUS = [\r\n  {\r\n    id: '1',\r\n    name: 'Nuevo',\r\n    color: 'info'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Problema',\r\n    color: 'warning'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Resuelto',\r\n    color: 'success'\r\n  }\r\n]\r\n\r\nexport const getIdTicketStatusByName = nameStatus =>\r\n  TICKET_STATUS.find(status => status.name.toLowerCase() === nameStatus?.toLowerCase())?.id\r\n\r\nexport const getColorTicketStatusById = id => TICKET_STATUS.find(status => status.id.toString() === id)?.color || 'info'\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { getAssignedTicketsSupportList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindAssignedTicketsSupport = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [TICKETS_SUPPORT_LIST_KEYS.ASSIGNED_LIST],\r\n    queryFn: getAssignedTicketsSupportList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de tickets asignados. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { TICKETS_SUPPORT_LIST_KEYS } from '../adapters'\r\nimport { getGeneratedTicketsSupportList } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useFindGeneratedTicketsSupport = (options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n\r\n  const query = useQuery({\r\n    queryKey: [TICKETS_SUPPORT_LIST_KEYS.GENERATED_LIST],\r\n    queryFn: getGeneratedTicketsSupportList,\r\n    refetchOnWindowFocus: false,\r\n    retry: false,\r\n    staleTime: 300000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la lista de tickets generados. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n      toast.error(errorMessage, {\r\n        type: getNotificationTypeByErrorCode(query.error)\r\n      })\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  ticket: null,\r\n  totalTicketsGenerated: 0,\r\n  totalTicketsAssigned: 0,\r\n  isTableFullScreen: false,\r\n  openTicketConversation: false,\r\n  canCloseTicket: false\r\n}\r\nconst ticketSupportListStore = (set, get) => ({\r\n  ...initialState,\r\n  setSupportTicketDetails: ticket => {\r\n    set(\r\n      state => ({\r\n        ticket\r\n      }),\r\n      false,\r\n      'SET_SUPPORT_TICKET_DETAILS'\r\n    )\r\n  },\r\n  setOpenTicketConversation: open => {\r\n    set(\r\n      state => ({\r\n        openTicketConversation: open\r\n      }),\r\n      false,\r\n      'SET_SUPPORT_TICKET_CONVERSATION'\r\n    )\r\n  },\r\n  setFullScreenTableSupportList: isFullScreen => {\r\n    set(\r\n      state => ({\r\n        isTableFullScreen: isFullScreen\r\n      }),\r\n      false,\r\n      'SET_FULL_SCREEN_TABLE_SUPPORT_LIST'\r\n    )\r\n  },\r\n  setTotalSupportTicketsGenerated: totalTicketsGenerated => {\r\n    set(\r\n      state => ({\r\n        totalTicketsGenerated\r\n      }),\r\n      false,\r\n      'SET_TOTAL_SUPPORT_TICKETS_GENERATED'\r\n    )\r\n  },\r\n  setTotalSupportTicketsAssigned: totalTicketsAssigned => {\r\n    set(\r\n      state => ({\r\n        totalTicketsAssigned\r\n      }),\r\n      false,\r\n      'SET_TOTAL_SUPPORT_TICKETS_ASSIGNED'\r\n    )\r\n  },\r\n  setCanCloseTicket: canClose => {\r\n    set(\r\n      state => ({\r\n        canCloseTicket: canClose\r\n      }),\r\n      false,\r\n      'SET_CAN_CLOSE_SUPPORT_TICKET'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useTicketSupportListStore = createStore(ticketSupportListStore)\r\n"],"file":"assets/js/SupportIncidences-ij17TojM.js"}