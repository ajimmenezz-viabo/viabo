{"version":3,"file":"SpeiNewCostCenterForm-QiSia1cP.js","sources":["../../../../../frontend/src/app/business/viabo-spei/cost-centers/adapters/spei-new-cost-center-adapter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/hooks/useCreateNewSpeiCostCenter.js","../../../../../frontend/src/app/business/viabo-spei/cost-centers/hooks/useUpdateSpeiCostCenter.js"],"sourcesContent":["import { METHODS_NEW_COST_CENTER_USERS } from './spei-cost-centers-keys'\r\n\r\nexport const SpeiNewCostCenterAdapter = company => ({\r\n  name: company?.name?.trim(),\r\n  isNewUser: company?.method === METHODS_NEW_COST_CENTER_USERS.NEW_ADMIN_USER,\r\n  assignedUsers: company?.adminUsers?.map(user => user.value) || [],\r\n  userName: company?.adminName?.trim(),\r\n  userLastName: company?.adminLastName?.trim(),\r\n  userEmail: company?.adminEmail?.trim(),\r\n  userPhone: company?.adminPhone?.trim()\r\n})\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COST_CENTERS_KEYS } from '../adapters'\r\nimport { newSpeiCostCenter } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useCreateNewSpeiCostCenter = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const costCenter = useMutation(newSpeiCostCenter, options)\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(costCenter.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Creando centro de costos...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([SPEI_COST_CENTERS_KEYS.COST_CENTERS_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n\r\n            return 'Se creó el centro de costos con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...costCenter,\r\n    mutate\r\n  }\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { SPEI_COST_CENTERS_KEYS } from '../adapters'\r\nimport { updateSpeiCostCenter } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const useUpdateCostCenter = (options = {}) => {\r\n  const client = useQueryClient()\r\n  const costCenter = useMutation(updateSpeiCostCenter, options)\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(costCenter.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Actualizando centro de costos...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([SPEI_COST_CENTERS_KEYS.COST_CENTERS_LIST])\r\n            isFunction(onSuccess) && onSuccess(data)\r\n\r\n            return 'Se actualizó el centro de costos con éxito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...costCenter,\r\n    mutate\r\n  }\r\n}\r\n"],"names":["SpeiNewCostCenterAdapter","company","_a","METHODS_NEW_COST_CENTER_USERS","_b","user","_c","_d","_e","_f","useCreateNewSpeiCostCenter","options","client","useQueryClient","costCenter","useMutation","newSpeiCostCenter","formData","onSuccess","onError","mutationOptions","toast","data","SPEI_COST_CENTERS_KEYS","isFunction","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode","useUpdateCostCenter","updateSpeiCostCenter"],"mappings":"0pBAEO,MAAMA,EAA2BC,GAAY,iBAAA,OAClD,MAAMC,EAAAD,GAAA,YAAAA,EAAS,OAAT,YAAAC,EAAe,OACrB,WAAWD,GAAA,YAAAA,EAAS,UAAWE,EAA8B,eAC7D,gBAAeC,EAAAH,GAAA,YAAAA,EAAS,aAAT,YAAAG,EAAqB,IAAIC,GAAQA,EAAK,SAAU,CAAE,EACjE,UAAUC,EAAAL,GAAA,YAAAA,EAAS,YAAT,YAAAK,EAAoB,OAC9B,cAAcC,EAAAN,GAAA,YAAAA,EAAS,gBAAT,YAAAM,EAAwB,OACtC,WAAWC,EAAAP,GAAA,YAAAA,EAAS,aAAT,YAAAO,EAAqB,OAChC,WAAWC,EAAAR,GAAA,YAAAA,EAAS,aAAT,YAAAQ,EAAqB,MAClC,GCDaC,EAA6B,CAACC,EAAU,KAAO,CAC1D,MAAMC,EAASC,EAAgB,EACzBC,EAAaC,EAAYC,EAAmBL,CAAO,EA4BzD,MAAO,CACL,GAAGG,EACH,OA7Ba,MAAOG,EAAUN,IAAY,CAC1C,KAAM,CAAE,UAAAO,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGT,EAEhD,GAAI,CACF,MAAMU,EAAM,QAAQP,EAAW,YAAYG,EAAUG,CAAe,EAAG,CACrE,QAAS,8BACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CACf,OAAAV,EAAO,kBAAkB,CAACW,EAAuB,iBAAiB,CAAC,EACnEC,EAAWN,CAAS,GAAKA,EAAUI,CAAI,EAEhC,uCACR,CACF,CACT,CAAO,CACF,OAAQG,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWL,CAAO,GAAKA,EAAQO,CAAc,EAC7CL,EAAM,MAAMK,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH,EClCaI,EAAsB,CAAClB,EAAU,KAAO,CACnD,MAAMC,EAASC,EAAgB,EACzBC,EAAaC,EAAYe,EAAsBnB,CAAO,EA4B5D,MAAO,CACL,GAAGG,EACH,OA7Ba,MAAOG,EAAUN,IAAY,CAC1C,KAAM,CAAE,UAAAO,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGT,EAEhD,GAAI,CACF,MAAMU,EAAM,QAAQP,EAAW,YAAYG,EAAUG,CAAe,EAAG,CACrE,QAAS,mCACT,QAAS,CACP,OAAO,CAAE,KAAAE,GAAQ,CACf,OAAAV,EAAO,kBAAkB,CAACW,EAAuB,iBAAiB,CAAC,EACnEC,EAAWN,CAAS,GAAKA,EAAUI,CAAI,EAEhC,4CACR,CACF,CACT,CAAO,CACF,OAAQG,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDD,EAAWL,CAAO,GAAKA,EAAQO,CAAc,EAC7CL,EAAM,MAAMK,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH"}