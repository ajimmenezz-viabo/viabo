{"version":3,"mappings":"whBAEA,MAAMA,EAAe,CACnB,SAAU,KACV,oBAAqB,GACrB,wBAAyB,GACzB,qBAAsB,EACxB,EACMC,EAAuB,CAACC,EAAKC,KAAS,CAC1C,GAAGH,EACH,YAAaI,GAAY,CACvBF,EAAIG,IAAU,CACZ,SAAAD,CACN,EAAM,CACH,EACD,uBAAwBE,GAAQ,CAC9BJ,EACEG,IAAU,CACR,oBAAqBC,CAC7B,GACM,GACA,2BACD,CACF,EACD,2BAA4BA,GAAQ,CAClCJ,EACEG,IAAU,CACR,wBAAyBC,CACjC,GACM,GACA,+BACD,CACF,EACD,wBAAyBA,GAAQ,CAC/BJ,EACEG,IAAU,CACR,qBAAsBC,CAC9B,GACM,GACA,4BACD,CACF,CACH,GAEaC,GAAcC,EAAYP,CAAoB,yiGC5C/C,MAACQ,GAA4B,CACvC,cAAe,eACf,iBAAkB,kBACpB,ECAaC,GAAkB,SAAY,CACzC,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMC,EAAM,IAAI,gBAAgB,EACjD,OAAOC,EAA2BF,CAAI,CACxC,EAEaG,GAAqB,MAAMC,GAAc,CACpD,KAAM,CAAE,KAAAJ,CAAM,EAAG,MAAMC,EAAM,IAAI,iBAAiBG,CAAU,EAAE,EAC9D,OAAOC,EAAgBL,CAAI,CAC7B,EAEaM,GAA4B,MAAMC,GAAe,CAC5D,KAAM,CAAE,KAAAP,CAAI,EAAK,MAAMC,EAAM,KAAK,qCAAsCM,CAAW,EACnF,OAAOP,CACT,EAEaQ,GAA4B,MAAMf,GAAY,CACzD,KAAM,CAAE,KAAAO,CAAI,EAAK,MAAMC,EAAM,KAAK,kCAAmCR,CAAQ,EAC7E,OAAOO,CACT,EAEaS,GAAwB,MAAMC,GAAW,CACpD,KAAM,CAAE,KAAAV,CAAI,EAAK,MAAMC,EAAM,IAAI,0CAA2CS,CAAO,EACnF,OAAOV,CACT,ECDMW,GAA0B,CAC9B,CACE,GAAI,EACJ,KAAM,WACN,MAAO,MACR,EACD,CACE,GAAI,EACJ,KAAM,aACN,MAAO,SACR,EACD,CACE,GAAI,EACJ,KAAM,aACN,MAAO,SACR,EACD,CACE,GAAI,EACJ,KAAM,YACN,MAAO,OACR,CACH,EAEaC,GAA6BC,GAAE,OAC1C,QAAAC,EAAAH,GAAwB,KAAKI,GAAUA,EAAO,GAAG,SAAU,IAAKF,EAAG,UAAU,IAA7E,YAAAC,EAAgF,QAAS,0oECxC9EE,GAAsB,CAACC,EAAU,KAAO,CACnD,KAAM,CAAE,gBAAAC,CAAiB,EAAGC,EAAa,EACnC,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAanD,MAAO,CACL,GAbgBC,EAAS,CAACzB,GAA0B,aAAa,EAAGC,GAAiB,CACrF,UAAW,GAAK,IAChB,QAASyB,GAAS,CAChB,MAAMC,EAAeC,EAAYF,EAAO,2CAA2C,EACnFH,EAAeI,CAAY,EAC3BP,EAAgBO,EAAc,CAC5B,QAAS,QACT,iBAAkB,GAC1B,CAAO,CACF,EACD,GAAGR,CACP,CAAG,EAGC,MAAOG,GAAe,IACvB,CACH","names":["initialState","commerceDetailsStore","set","get","commerce","state","open","useCommerce","createStore","MANAGEMENT_COMMERCES_KEYS","getCommerceList","data","axios","ManagementCommercesAdapter","getCommerceDetails","commerceId","CommerceAdapter","updateCommerceCommissions","commissions","updateCommerceInformation","updateCommerceService","service","CATALOG_STATUS_COMMERCE","getColorStatusCommerceById","id","_a","status","useFindCommerceList","options","enqueueSnackbar","useSnackbar","customError","setCustomError","useState","useQuery","error","errorMessage","getErrorAPI"],"sources":["../../../../../frontend/src/app/management/commerces/store/commerceDetailsStore.js","../../../../../frontend/src/app/management/commerces/adapters/managementCommercesKeys.js","../../../../../frontend/src/app/management/commerces/services/ManagementCommercesRepository.js","../../../../../frontend/src/app/management/commerces/services/getCommerceStatus.js","../../../../../frontend/src/app/management/commerces/hooks/useFindCommerceList.js"],"sourcesContent":["import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  commerce: null,\r\n  openCommerceDetails: false,\r\n  openCommerceCommissions: false,\r\n  openCommerceServices: false\r\n}\r\nconst commerceDetailsStore = (set, get) => ({\r\n  ...initialState,\r\n  setCommerce: commerce => {\r\n    set(state => ({\r\n      commerce\r\n    }))\r\n  },\r\n  setOpenCommerceDetails: open => {\r\n    set(\r\n      state => ({\r\n        openCommerceDetails: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_COMMERCE_DETAILS'\r\n    )\r\n  },\r\n  setOpenCommerceCommissions: open => {\r\n    set(\r\n      state => ({\r\n        openCommerceCommissions: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_COMMERCE_COMMISSIONS'\r\n    )\r\n  },\r\n  setOpenCommerceServices: open => {\r\n    set(\r\n      state => ({\r\n        openCommerceServices: open\r\n      }),\r\n      false,\r\n      'SET_OPEN_COMMERCE_SERVICES'\r\n    )\r\n  }\r\n})\r\n\r\nexport const useCommerce = createStore(commerceDetailsStore)\r\n","export const MANAGEMENT_COMMERCES_KEYS = {\r\n  COMMERCE_LIST: 'commerceList',\r\n  COMMERCE_DETAILS: 'commerce-details'\r\n}\r\n","import { CommerceAdapter, ManagementCommercesAdapter } from '@/app/management/commerces/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getCommerceList = async () => {\r\n  const { data } = await axios.get('/api/commerces')\r\n  return ManagementCommercesAdapter(data)\r\n}\r\n\r\nexport const getCommerceDetails = async commerceId => {\r\n  const { data } = await axios.get(`/api/commerce/${commerceId}`)\r\n  return CommerceAdapter(data)\r\n}\r\n\r\nexport const updateCommerceCommissions = async commissions => {\r\n  const { data } = await axios.post('/api/commerce/commissions/register', commissions)\r\n  return data\r\n}\r\n\r\nexport const updateCommerceInformation = async commerce => {\r\n  const { data } = await axios.post('/api/backoffice/commerce/update', commerce)\r\n  return data\r\n}\r\n\r\nexport const updateCommerceService = async service => {\r\n  const { data } = await axios.put('/api/backoffice/commerce/service/update', service)\r\n  return data\r\n}\r\n","export const getColorStatusCommerce = name => {\r\n  let colorText\r\n  switch (name.toUpperCase()) {\r\n    case 'REGISTRO':\r\n      colorText = 'info'\r\n      break\r\n    case 'VALIDACION':\r\n      colorText = 'warning'\r\n      break\r\n    case 'AFILIACION':\r\n      colorText = 'primary'\r\n      break\r\n    case 'CONCLUIDO':\r\n      colorText = 'success'\r\n      break\r\n    case 'CANCELADO':\r\n      colorText = 'error'\r\n      break\r\n    default:\r\n      colorText = 'secondary'\r\n      break\r\n  }\r\n  return colorText\r\n}\r\n\r\nconst CATALOG_STATUS_COMMERCE = [\r\n  {\r\n    id: 1,\r\n    name: 'Registro',\r\n    color: 'info'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Validacion',\r\n    color: 'warning'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Afiliacion',\r\n    color: 'primary'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Cancelado',\r\n    color: 'error'\r\n  }\r\n]\r\n\r\nexport const getColorStatusCommerceById = id =>\r\n  CATALOG_STATUS_COMMERCE.find(status => status.id.toString() === id.toString())?.color || 'info'\r\n","import { useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport { MANAGEMENT_COMMERCES_KEYS } from '@/app/management/commerces/adapters'\r\nimport { getCommerceList } from '@/app/management/commerces/services'\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceList = (options = {}) => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n  const [customError, setCustomError] = useState(null)\r\n  const commerces = useQuery([MANAGEMENT_COMMERCES_KEYS.COMMERCE_LIST], getCommerceList, {\r\n    staleTime: 60 * 5000,\r\n    onError: error => {\r\n      const errorMessage = getErrorAPI(error, 'No se puede obtener la lista de comercios')\r\n      setCustomError(errorMessage)\r\n      enqueueSnackbar(errorMessage, {\r\n        variant: 'error',\r\n        autoHideDuration: 5000\r\n      })\r\n    },\r\n    ...options\r\n  })\r\n  return {\r\n    ...commerces,\r\n    error: customError || null\r\n  }\r\n}\r\n"],"file":"assets/js/ManagementCommerces-gJpVwsMP.js"}