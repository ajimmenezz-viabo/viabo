{"version":3,"file":"FormAssignCards-b1eqVHZW.js","sources":["../../../../../frontend/src/app/business/viabo-card/all-commerce-cards/adapters/assignCardsAdapter.js","../../../../../frontend/src/app/business/viabo-card/all-commerce-cards/hooks/useAssignCards.js"],"sourcesContent":["import { getCryptInfo } from '@/shared/utils'\r\n\r\nexport const AssignCardsAdapter = (formValues, cards, isEmptyCVV) => {\r\n  const { phone, email, name } = formValues\r\n  const data = {\r\n    name,\r\n    phone,\r\n    email,\r\n    cards: isEmptyCVV\r\n      ? [{ id: cards[0]?.id, cvv: formValues?.cvv }]\r\n      : cards?.map(card => ({\r\n          id: card?.id,\r\n          cvv: card?.cvv\r\n        })) || []\r\n  }\r\n  return getCryptInfo(data)\r\n}\r\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { ALL_COMMERCE_CARDS_KEYS } from '@/app/business/viabo-card/all-commerce-cards/adapters'\r\nimport { assignCards } from '@/app/business/viabo-card/all-commerce-cards/services'\r\nimport { CARDS_COMMERCES_KEYS } from '@/app/business/viabo-card/cards/adapters'\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\n\r\nexport const useAssignCards = (options = {}) => {\r\n  const client = useQueryClient()\r\n\r\n  const transactionMutate = useMutation(assignCards, options)\r\n  const transaction = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      await toast.promise(transactionMutate.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Asignando Tarjetas ...',\r\n        success: {\r\n          render({ data }) {\r\n            client.invalidateQueries([ALL_COMMERCE_CARDS_KEYS.LIST])\r\n            client.invalidateQueries([CARDS_COMMERCES_KEYS.CARDS_COMMERCE_LIST])\r\n            onSuccess()\r\n            return 'Se asignaron las tarjetas con Ã©xito'\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operacion en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...transactionMutate,\r\n    mutate: transaction\r\n  }\r\n}\r\n"],"names":["AssignCardsAdapter","formValues","cards","isEmptyCVV","phone","email","name","data","_a","card","getCryptInfo","useAssignCards","options","client","useQueryClient","transactionMutate","useMutation","assignCards","formData","onSuccess","onError","mutationOptions","toast","ALL_COMMERCE_CARDS_KEYS","CARDS_COMMERCES_KEYS","error","errorFormatted","getErrorAPI","getNotificationTypeByErrorCode"],"mappings":"4kCAEO,MAAMA,EAAqB,CAACC,EAAYC,EAAOC,IAAe,OACnE,KAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,KAAAC,CAAM,EAAGL,EACzBM,EAAO,CACX,KAAAD,EACA,MAAAF,EACA,MAAAC,EACA,MAAOF,EACH,CAAC,CAAE,IAAIK,EAAAN,EAAM,CAAC,IAAP,YAAAM,EAAU,GAAI,IAAKP,GAAA,YAAAA,EAAY,IAAK,GAC3CC,GAAA,YAAAA,EAAO,IAAIO,IAAS,CAClB,GAAIA,GAAA,YAAAA,EAAM,GACV,IAAKA,GAAA,YAAAA,EAAM,GACZ,MAAM,CAAE,CACd,EACD,OAAOC,EAAaH,CAAI,CAC1B,ECRaI,EAAiB,CAACC,EAAU,KAAO,CAC9C,MAAMC,EAASC,EAAgB,EAEzBC,EAAoBC,EAAYC,EAAaL,CAAO,EA4B1D,MAAO,CACL,GAAGG,EACH,OA7BkB,MAAOG,EAAUN,IAAY,CAC/C,KAAM,CAAE,UAAAO,EAAW,QAAAC,EAAS,gBAAAC,CAAiB,EAAGT,EAEhD,GAAI,CACF,MAAMU,EAAM,QAAQP,EAAkB,YAAYG,EAAUG,CAAe,EAAG,CAC5E,QAAS,yBACT,QAAS,CACP,OAAO,CAAE,KAAAd,GAAQ,CACf,OAAAM,EAAO,kBAAkB,CAACU,EAAwB,IAAI,CAAC,EACvDV,EAAO,kBAAkB,CAACW,EAAqB,mBAAmB,CAAC,EACnEL,EAAW,EACJ,qCACR,CACF,CACT,CAAO,CACF,OAAQM,EAAO,CACd,MAAMC,EAAiBC,EACrBF,EACA,8FACD,EACDL,EAAQM,CAAc,EACtBJ,EAAM,MAAMI,EAAgB,CAC1B,KAAME,EAA+BH,CAAK,CAClD,CAAO,CACF,CACF,CAKA,CACH"}