{"version":3,"file":"SpeiOutForm-B56bWJxs.js","sources":["../../../../../frontend/src/app/business/viabo-spei/dashboard/admin-stp/components/spei-out/SpeiOutForm.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\n\r\nimport { Add, ArrowForwardIos, Delete } from '@mui/icons-material'\r\nimport { Box, Button, Divider, IconButton, InputAdornment, Stack, TextField, Typography } from '@mui/material'\r\nimport { createAvatar } from '@theme/utils'\r\nimport { FieldArray, getIn, useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { Avatar } from '@/shared/components/avatar'\r\nimport { FormProvider, MaskedInput, RFSelect, RFTextField } from '@/shared/components/form'\r\nimport { Scrollbar } from '@/shared/components/scroll'\r\n\r\nconst SpeiOutForm = ({ accounts, setCurrentBalance, insufficient, onSuccess, initialValues }) => {\r\n  const arrayHelpersRef = useRef(null)\r\n\r\n  const crypto = window.crypto || window.msCrypto\r\n\r\n  const array = new Uint32Array(1)\r\n\r\n  const random = crypto.getRandomValues(array)[0]\r\n\r\n  const [accountsToSelect, setAccountsToSelect] = useState(accounts)\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    transactions: Yup.array().of(\r\n      Yup.object().shape({\r\n        amount: Yup.string()\r\n          .test('maxAmount', 'Monto m√°ximo de transferencia $50,000', function (value) {\r\n            return parseFloat(value?.replace(/,/g, '')) <= 50000\r\n          })\r\n          .required('La cantidad es requerida'),\r\n        account: Yup.object().nullable().required('La cuenta es requerida')\r\n      })\r\n    )\r\n  })\r\n\r\n  const formik = useFormik({\r\n    initialValues: initialValues || {\r\n      transactions: [\r\n        {\r\n          id: random,\r\n          account: null,\r\n          amount: ''\r\n        }\r\n      ],\r\n      concept: ''\r\n    },\r\n    validateOnChange: false,\r\n    validationSchema: RegisterSchema,\r\n    onSubmit: values => {\r\n      if (insufficient) {\r\n        return setSubmitting(false)\r\n      }\r\n      setSubmitting(false)\r\n      return onSuccess(values)\r\n    }\r\n  })\r\n\r\n  const { isSubmitting, setFieldValue, values, setSubmitting, errors, touched } = formik\r\n\r\n  const loading = isSubmitting\r\n\r\n  useEffect(() => {\r\n    const totalAmount = values.transactions?.reduce((accumulator, currentObject) => {\r\n      const amountValue = currentObject.amount.trim() !== '' ? parseFloat(currentObject.amount.replace(/,/g, '')) : 0\r\n\r\n      if (!isNaN(amountValue)) {\r\n        return accumulator + amountValue\r\n      } else {\r\n        return accumulator\r\n      }\r\n    }, 0)\r\n\r\n    const currentBalance = totalAmount.toFixed(2)\r\n\r\n    setCurrentBalance(currentBalance)\r\n  }, [values.transactions])\r\n\r\n  return (\r\n    <>\r\n      <Stack p={3} pb={0} gap={1} flexDirection={{ xs: 'column-reverse', md: 'row' }} alignItems={'center'}>\r\n        <Typography variant=\"subtitle1\" sx={{ color: 'text.disabled' }}>\r\n          Transacciones:\r\n        </Typography>\r\n        <Stack spacing={2} justifyContent=\"flex-end\" direction={{ xs: 'column', md: 'row' }} sx={{ width: 1 }} />\r\n        <Stack direction={'row'} spacing={1}>\r\n          <Button\r\n            type=\"button\"\r\n            size=\"small\"\r\n            variant={'outlined'}\r\n            startIcon={<Add />}\r\n            disabled={loading}\r\n            onClick={() =>\r\n              arrayHelpersRef.current.push({\r\n                id: random,\r\n                account: null,\r\n                amount: '',\r\n                concept: ''\r\n              })\r\n            }\r\n            sx={{ flexShrink: 0 }}\r\n          >\r\n            Agregar\r\n          </Button>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <Scrollbar containerProps={{ sx: { flexGrow: 0, height: 'auto' } }}>\r\n        <FormProvider formik={formik}>\r\n          <Box sx={{ p: 3 }}>\r\n            <FieldArray\r\n              name=\"transactions\"\r\n              render={arrayHelpers => {\r\n                arrayHelpersRef.current = arrayHelpers\r\n                return (\r\n                  <Stack divider={<Divider flexItem sx={{ borderStyle: 'dashed' }} />} spacing={3}>\r\n                    {values?.transactions.map((item, index) => {\r\n                      const account = `transactions[${index}].account`\r\n                      const errorFieldAccount = getIn(errors, account)\r\n                      const amount = `transactions[${index}].amount`\r\n\r\n                      return (\r\n                        <Stack key={item.id} alignItems=\"flex-end\" spacing={1.5}>\r\n                          <Stack\r\n                            direction={{ xs: 'column', md: 'row' }}\r\n                            spacing={2}\r\n                            sx={{ width: 1 }}\r\n                            alignItems={'flex-start'}\r\n                          >\r\n                            <Typography variant={'overline'} color={'text.disabled'}>\r\n                              {index + 1}\r\n                            </Typography>\r\n                            <RFSelect\r\n                              name={account}\r\n                              disabled={loading}\r\n                              textFieldParams={{\r\n                                placeholder: 'Seleccionar ...',\r\n                                label: 'Cuentas',\r\n                                required: true,\r\n                                size: 'small'\r\n                              }}\r\n                              options={accountsToSelect || []}\r\n                              onChange={(e, value) => {\r\n                                const filterAccounts = accountsToSelect?.map(account => {\r\n                                  if (!value?.value && account.value === item?.account?.value) {\r\n                                    return { ...account, isDisabled: false }\r\n                                  }\r\n                                  if (account.value === value?.value) {\r\n                                    return { ...account, isDisabled: true }\r\n                                  }\r\n\r\n                                  if (account.value === item?.account?.value) {\r\n                                    return { ...account, isDisabled: false }\r\n                                  }\r\n                                  return account\r\n                                })\r\n\r\n                                setAccountsToSelect(filterAccounts)\r\n                                setFieldValue(account, value)\r\n                              }}\r\n                              renderOption={(props, option) => {\r\n                                const avatar = createAvatar(option?.label)\r\n\r\n                                return (\r\n                                  <Box component=\"li\" {...props}>\r\n                                    <Stack direction={'row'} spacing={1} alignItems={'center'}>\r\n                                      <Avatar\r\n                                        src={option.label !== '' ? option.label : ''}\r\n                                        alt={option.label}\r\n                                        color={avatar?.color}\r\n                                        sx={{ width: 25, height: 25, fontSize: 12 }}\r\n                                      >\r\n                                        {avatar?.name}\r\n                                      </Avatar>\r\n                                      <span>{option.label}</span>\r\n                                    </Stack>\r\n                                  </Box>\r\n                                )\r\n                              }}\r\n                              renderInput={params => {\r\n                                const avatar = createAvatar(params?.inputProps?.value || '')\r\n\r\n                                return (\r\n                                  <TextField\r\n                                    {...params}\r\n                                    size=\"small\"\r\n                                    placeholder=\"Seleccionar ...\"\r\n                                    label={'Beneficiario'}\r\n                                    inputProps={{\r\n                                      ...params.inputProps\r\n                                    }}\r\n                                    error={Boolean(errorFieldAccount)}\r\n                                    helperText={errorFieldAccount || ''}\r\n                                    required\r\n                                    InputProps={{\r\n                                      ...params.InputProps,\r\n                                      startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <Avatar\r\n                                            src={''}\r\n                                            alt={params.inputProps?.value || 'avatar'}\r\n                                            color={avatar?.color}\r\n                                            sx={{ width: 25, height: 25, fontSize: 12 }}\r\n                                          >\r\n                                            {avatar?.name !== 'undefined' ? avatar?.name : null}\r\n                                          </Avatar>\r\n                                        </InputAdornment>\r\n                                      )\r\n                                    }}\r\n                                  />\r\n                                )\r\n                              }}\r\n                              sx={{ width: { xs: 1, lg: 0.6 } }}\r\n                            />\r\n                            <RFTextField\r\n                              sx={{ width: { xs: 1, lg: 0.4 } }}\r\n                              size={'small'}\r\n                              name={amount}\r\n                              required={true}\r\n                              label={'Monto'}\r\n                              placeholder={'0.00'}\r\n                              disabled={loading}\r\n                              autoComplete={'off'}\r\n                              InputProps={{\r\n                                startAdornment: <span style={{ marginRight: '5px' }}>$</span>,\r\n                                inputComponent: MaskedInput,\r\n                                inputProps: {\r\n                                  mask: Number,\r\n                                  radix: '.',\r\n                                  thousandsSeparator: ',',\r\n                                  padFractionalZeros: true,\r\n                                  min: 0,\r\n                                  scale: 2,\r\n                                  value: item.amount,\r\n                                  onAccept: value => {\r\n                                    setFieldValue(amount, value)\r\n                                  }\r\n                                }\r\n                              }}\r\n                            />\r\n                            {index !== 0 && (\r\n                              <IconButton\r\n                                size=\"small\"\r\n                                color=\"error\"\r\n                                title=\"Borrar\"\r\n                                disabled={loading}\r\n                                onClick={() => {\r\n                                  const filterAccounts = accountsToSelect?.map(account => {\r\n                                    if (account.value === item?.account?.value) {\r\n                                      return { ...account, isDisabled: false }\r\n                                    }\r\n                                    return account\r\n                                  })\r\n\r\n                                  setAccountsToSelect(filterAccounts)\r\n                                  arrayHelpers.remove(index)\r\n                                }}\r\n                              >\r\n                                <Delete />\r\n                              </IconButton>\r\n                            )}\r\n                          </Stack>\r\n                        </Stack>\r\n                      )\r\n                    })}\r\n                  </Stack>\r\n                )\r\n              }}\r\n            />\r\n            <Divider sx={{ my: 3, borderStyle: 'dashed' }} />\r\n            <Stack sx={{ width: 1 }}>\r\n              <RFTextField\r\n                name={'concept'}\r\n                multiline\r\n                disabled={loading}\r\n                rows={2}\r\n                label={'Concepto'}\r\n                placeholder={'Transferencia ..'}\r\n              />\r\n            </Stack>\r\n\r\n            <Stack sx={{ pt: 3 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={insufficient}\r\n                fullWidth\r\n                type=\"submit\"\r\n                startIcon={<ArrowForwardIos />}\r\n              >\r\n                Siguiente\r\n              </Button>\r\n            </Stack>\r\n          </Box>\r\n        </FormProvider>\r\n      </Scrollbar>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SpeiOutForm\r\n"],"names":["SpeiOutForm","accounts","setCurrentBalance","insufficient","onSuccess","initialValues","arrayHelpersRef","useRef","crypto","window","msCrypto","array","Uint32Array","random","getRandomValues","accountsToSelect","setAccountsToSelect","useState","RegisterSchema","Yup","shape","transactions","of","object","amount","test","value","parseFloat","replace","required","account","nullable","formik","useFormik","id","concept","validateOnChange","validationSchema","onSubmit","values","setSubmitting","isSubmitting","setFieldValue","errors","touched","loading","useEffect","currentBalance","reduce","accumulator","currentObject","amountValue","trim","isNaN","toFixed","jsxs","Fragment","Stack","xs","md","jsx","Typography","color","width","Button","Add","current","push","flexShrink","Scrollbar","sx","flexGrow","height","FormProvider","Box","p","FieldArray","arrayHelpers","Divider","borderStyle","map","item","index","errorFieldAccount","getIn","RFSelect","placeholder","label","size","e","filterAccounts","isDisabled","props","option","avatar","createAvatar","Avatar","fontSize","name","params","inputProps","TextField","Boolean","InputProps","startAdornment","InputAdornment","lg","RFTextField","marginRight","inputComponent","MaskedInput","mask","Number","radix","thousandsSeparator","padFractionalZeros","min","scale","onAccept","IconButton","remove","Delete","my","pt","ArrowForwardIos"],"mappings":"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"}