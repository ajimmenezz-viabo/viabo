{"version":3,"mappings":"yoBASO,MAAMA,EAA+B,CAACC,EAAU,KAAO,CAC5D,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACC,EAAoB,wBAAwB,EACvD,QAAS,CAAC,CAAE,OAAAC,CAAQ,IAAKC,EAA+B,EACxD,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGR,CACP,CAAG,EAEDS,mBAAU,IAAM,CACd,GAAIL,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMM,EAAeC,EACnBP,EAAM,MACN,mFACD,EACDF,EAAeQ,CAAY,CAC5B,CACF,EAAE,CAACN,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH,ECzBaW,EAA4B,CAACC,EAAWb,EAAU,KAAO,CACpE,KAAM,CAACC,EAAaC,CAAc,EAAIC,WAAS,IAAI,EAE7CC,EAAQC,EAAS,CACrB,SAAU,CAACC,EAAoB,gBAAiBO,CAAS,EACzD,QAAS,IAAMC,EAA2BD,CAAS,EACnD,qBAAsB,GACtB,MAAO,GACP,UAAW,IACX,GAAGb,CACP,CAAG,EAEDS,mBAAU,IAAM,CACd,GAAIL,GAAA,MAAAA,EAAO,QAAS,CAClB,MAAMM,EAAeC,EACnBP,EAAM,MACN,2FACD,EACDF,EAAeQ,CAAY,EAC3BK,EAAM,MAAML,EAAc,CACxB,KAAMM,EAA+BZ,EAAM,KAAK,CACxD,CAAO,CACF,CACF,EAAE,CAACA,EAAM,QAASA,EAAM,KAAK,CAAC,EAExB,CACL,GAAGA,EACH,MAAOH,GAAe,IACvB,CACH","names":["useFindSpeiAdminCompanyUsers","options","customError","setCustomError","useState","query","useQuery","SPEI_COMPANIES_KEYS","signal","getViaboSpeiAdminCompanyUsers","useEffect","errorMessage","getErrorAPI","useFindSpeiCompanyDetails","companyId","getViaboSpeiCompanyDetails","toast","getNotificationTypeByErrorCode"],"sources":["../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiAdminCompanyUsers.js","../../../../../frontend/src/app/business/viabo-spei/companies/hooks/useFindSpeiCompanyDetails.js"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { useQuery } from '@tanstack/react-query'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { getViaboSpeiAdminCompanyUsers } from '../services'\n\nimport { getErrorAPI } from '@/shared/interceptors'\n\nexport const useFindSpeiAdminCompanyUsers = (options = {}) => {\n  const [customError, setCustomError] = useState(null)\n\n  const query = useQuery({\n    queryKey: [SPEI_COMPANIES_KEYS.USERS_ADMIN_COMPANY_LIST],\n    queryFn: ({ signal }) => getViaboSpeiAdminCompanyUsers(),\n    refetchOnWindowFocus: false,\n    retry: false,\n    staleTime: 300000,\n    ...options\n  })\n\n  useEffect(() => {\n    if (query?.isError) {\n      const errorMessage = getErrorAPI(\n        query.error,\n        'No se puede obtener la lista de usuarios. Intente nuevamente o reporte a sistemas'\n      )\n      setCustomError(errorMessage)\n    }\n  }, [query.isError, query.error])\n\n  return {\n    ...query,\n    error: customError || null\n  }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useQuery } from '@tanstack/react-query'\nimport { toast } from 'react-toastify'\n\nimport { SPEI_COMPANIES_KEYS } from '../adapters'\nimport { getViaboSpeiCompanyDetails } from '../services'\n\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\n\nexport const useFindSpeiCompanyDetails = (companyId, options = {}) => {\n  const [customError, setCustomError] = useState(null)\n\n  const query = useQuery({\n    queryKey: [SPEI_COMPANIES_KEYS.COMPANY_DETAILS, companyId],\n    queryFn: () => getViaboSpeiCompanyDetails(companyId),\n    refetchOnWindowFocus: false,\n    retry: false,\n    staleTime: 300000,\n    ...options\n  })\n\n  useEffect(() => {\n    if (query?.isError) {\n      const errorMessage = getErrorAPI(\n        query.error,\n        'No se puede obtener la informaci√≥n de la empresa. Intente nuevamente o reporte a sistemas'\n      )\n      setCustomError(errorMessage)\n      toast.error(errorMessage, {\n        type: getNotificationTypeByErrorCode(query.error)\n      })\n    }\n  }, [query.isError, query.error])\n\n  return {\n    ...query,\n    error: customError || null\n  }\n}\n"],"file":"assets/js/SpeiNewCompanyDrawer-Ov_3515t.js"}