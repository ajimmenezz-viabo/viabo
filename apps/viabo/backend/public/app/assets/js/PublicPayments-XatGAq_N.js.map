{"version":3,"file":"PublicPayments-XatGAq_N.js","sources":["../../../../../frontend/src/app/public/payments/adapters/public-payment-adapter.js","../../../../../frontend/src/app/public/payments/adapters/payment-by-cash-adapter.js","../../../../../frontend/src/app/public/payments/adapters/payment-by-terminal-adapter.js","../../../../../frontend/src/app/public/payments/adapters/public-payments-keys.js","../../../../../frontend/src/app/public/payments/services/PublicPaymentsRepository.js","../../../../../frontend/src/app/public/payments/store/public-payment-store.js","../../../../../frontend/src/app/public/payments/hooks/useFindCommerceInfoBySlug.js","../../../../../frontend/src/app/public/payments/hooks/usePayWithCashMethod.js","../../../../../frontend/src/app/public/payments/hooks/usePayWithTerminalMethod.js"],"sourcesContent":["export const PublicPaymentAdapter = payment => ({\r\n  method: payment?.paymentType,\r\n  name: payment?.name,\r\n  email: payment?.email,\r\n  phone: `+52 ${payment?.phone}`,\r\n  amount: parseFloat(\r\n    payment?.amount?.toString() === '' ? '0' : payment?.amount?.toString().replace(/,/g, '')\r\n  ).toString(),\r\n  description: payment?.concept\r\n})\r\n","import { PublicPaymentAdapter } from './public-payment-adapter'\r\n\r\nimport { getDecryptInfo } from '@/shared/utils'\r\n\r\nexport const PaymentByCashAdapter = (payment, commerce) => {\r\n  const publicPayment = PublicPaymentAdapter(payment)\r\n  const dataAdapted = {\r\n    commerceId: commerce?.id,\r\n    ...publicPayment,\r\n    email: [publicPayment?.email]\r\n  }\r\n\r\n  return dataAdapted\r\n}\r\n\r\nexport const PaymentByCashAdapterResponseAdapter = response => {\r\n  const decryptedResponse = getDecryptInfo(response?.ciphertext, response?.iv)\r\n\r\n  if (decryptedResponse) {\r\n    return {\r\n      download: decryptedResponse?.instructionsUrls?.download,\r\n      pay: decryptedResponse?.instructionsUrls?.format,\r\n      id: decryptedResponse?.id,\r\n      reference: decryptedResponse?.referenceNumber\r\n    }\r\n  } else {\r\n    throw new Error('Algo fallo al obtener la información')\r\n  }\r\n}\r\n","import { PublicPaymentAdapter } from './public-payment-adapter'\r\n\r\nfunction convertToDoubleDigit(number) {\r\n  return /^([1-9])$/.test(number) ? '0' + number : number\r\n}\r\n\r\nexport const PaymentByTerminalAdapter = (payment, commerce) => {\r\n  const publicPayment = PublicPaymentAdapter(payment)\r\n  const dataAdapted = {\r\n    ...publicPayment,\r\n    commerceId: commerce?.id,\r\n    terminalId: commerce?.information?.publicTerminal,\r\n    cardNumber: payment?.cardNumber.replace(/\\s+/g, ''),\r\n    expMonth: convertToDoubleDigit(payment?.month + 1)?.toString() || '',\r\n    expYear: payment?.year?.toString()?.slice(-2) || '',\r\n    security: payment?.cvv,\r\n    clientName: commerce?.name\r\n  }\r\n  return dataAdapted\r\n}\r\n","export const PUBLIC_PAYMENTS = {\r\n  COMMERCE_INFO_SLUG: 'commerce-info-by-slug'\r\n}\r\n","import { PaymentByCashAdapterResponseAdapter } from '../adapters'\r\n\r\nimport { CommerceAdapter } from '@/app/management/commerces/adapters'\r\nimport { axios } from '@/shared/interceptors'\r\n\r\nexport const getCommerceInfoBySlug = async slug => {\r\n  const { data } = await axios.get(`/api/commerce-slug/${slug}`)\r\n\r\n  return CommerceAdapter(data, true)\r\n}\r\n\r\nexport const payWithCashMethod = async payment => {\r\n  const { data } = await axios.post(`/api/slug/funding-order/new`, payment)\r\n\r\n  return PaymentByCashAdapterResponseAdapter(data)\r\n}\r\n\r\nexport const payWithTerminalMethod = async payment => {\r\n  const { data } = await axios.post(`/api/commerce-slug/terminal/transaction`, payment)\r\n  return data\r\n}\r\n","import { createStore } from '@/app/shared/store'\r\n\r\nconst initialState = {\r\n  commerce: null\r\n}\r\n\r\nconst publicPaymentStore = (set, get) => ({\r\n  ...initialState,\r\n  setCommerceInfo: commerce => {\r\n    set(\r\n      state => ({\r\n        commerce\r\n      }),\r\n      false,\r\n      'SET_PUBLIC_PAYMENT_COMMERCE_INFO'\r\n    )\r\n  }\r\n})\r\n\r\nexport const usePublicPaymentStore = createStore(publicPaymentStore)\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { useQuery } from '@tanstack/react-query'\r\n\r\nimport { PUBLIC_PAYMENTS } from '../adapters'\r\nimport { getCommerceInfoBySlug } from '../services'\r\nimport { usePublicPaymentStore } from '../store'\r\n\r\nimport { getErrorAPI } from '@/shared/interceptors'\r\n\r\nexport const useFindCommerceInfoBySlug = (slug, options = {}) => {\r\n  const [customError, setCustomError] = useState(null)\r\n  const setCommerceInfo = usePublicPaymentStore(state => state.setCommerceInfo)\r\n\r\n  const query = useQuery({\r\n    queryKey: [PUBLIC_PAYMENTS.COMMERCE_INFO_SLUG],\r\n    queryFn: async ({ signal }) => {\r\n      const data = await getCommerceInfoBySlug(slug, signal)\r\n      setCommerceInfo(data)\r\n\r\n      return data\r\n    },\r\n    staleTime: 60000,\r\n    ...options\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (query?.isError) {\r\n      const errorMessage = getErrorAPI(\r\n        query.error,\r\n        'No se puede obtener la información del comercio. Intente nuevamente o reporte a sistemas'\r\n      )\r\n      setCustomError(errorMessage)\r\n    }\r\n  }, [query.isError, query.error])\r\n\r\n  return {\r\n    ...query,\r\n    error: customError || null\r\n  }\r\n}\r\n","import { useMutation } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { payWithCashMethod } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const usePayWithCashMethod = (options = {}) => {\r\n  const cash = useMutation(payWithCashMethod, options)\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      const data = await toast.promise(cash.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Generando liga de pago ...'\r\n      })\r\n      isFunction(onSuccess) && onSuccess(data)\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...cash,\r\n    mutate\r\n  }\r\n}\r\n","import { useMutation } from '@tanstack/react-query'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport { payWithTerminalMethod } from '../services'\r\n\r\nimport { getErrorAPI, getNotificationTypeByErrorCode } from '@/shared/interceptors'\r\nimport { isFunction } from '@/shared/utils'\r\n\r\nexport const usePayWithTerminalMethod = (options = {}) => {\r\n  const terminal = useMutation(payWithTerminalMethod, options)\r\n  const mutate = async (formData, options) => {\r\n    const { onSuccess, onError, mutationOptions } = options\r\n\r\n    try {\r\n      const data = await toast.promise(terminal.mutateAsync(formData, mutationOptions), {\r\n        pending: 'Realizando Transacción ...'\r\n      })\r\n      isFunction(onSuccess) && onSuccess(data)\r\n    } catch (error) {\r\n      const errorFormatted = getErrorAPI(\r\n        error,\r\n        `No se puede realizar esta operación en este momento. Intente nuevamente o reporte a sistemas`\r\n      )\r\n      isFunction(onError) && onError(errorFormatted)\r\n      toast.error(errorFormatted, {\r\n        type: getNotificationTypeByErrorCode(error)\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...terminal,\r\n    mutate\r\n  }\r\n}\r\n"],"names":["PublicPaymentAdapter","payment","_a","_b","PaymentByCashAdapter","commerce","publicPayment","PaymentByCashAdapterResponseAdapter","response","decryptedResponse","getDecryptInfo","convertToDoubleDigit","number","PaymentByTerminalAdapter","_d","_c","PUBLIC_PAYMENTS","getCommerceInfoBySlug","slug","data","axios","CommerceAdapter","payWithCashMethod","payWithTerminalMethod","initialState","publicPaymentStore","set","get","state","usePublicPaymentStore","createStore","useFindCommerceInfoBySlug","options","customError","setCustomError","useState","setCommerceInfo","query","useQuery","signal","useEffect","errorMessage","getErrorAPI","usePayWithCashMethod","cash","useMutation","formData","onSuccess","onError","mutationOptions","toast","isFunction","error","errorFormatted","getNotificationTypeByErrorCode","usePayWithTerminalMethod","terminal"],"mappings":"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"}